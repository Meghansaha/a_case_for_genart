{
  "hash": "f9bcd7774b3ad206242c25452a2f6ca1",
  "result": {
    "markdown": "---\ntitle: \"It's All About Perspective\"\nsubtitle: \"Making A Case for Generative Art\"\nauthor: \"Meghan Harris, MPH\"\ninstitute: \"Posit::conf(2023)\"\ndate: \"09-20-2023\"\ndate-format: \"MMMM Do, YYYY | YYYY-MM-DD\"\nformat:\n  revealjs: \n    slide-number: true\n    width: 1690\n    height: 1080\n    linkcolor: \"#ffffff\"\n    highlight-style: github\n    code-copy: true\n    code-overflow: scroll\n    code-block-bg: true\n    transition: fade\ncss: \"scripts/style.css\"\neditor: visual\ntitle-slide-attributes: \n  data-background-image: \"images/background.png\"\n  data-background-size: \"stretch\"\n  data-background-position: \"center\"\n  data-background-color: \"#1a1a1a\"\n  data-notes: \"Hello, Im Meghan Harris, I'm a data scientist at the Prostate Cancer Clinical Trials Consortium, and I'm also a generative artist that's here to introduce you all to generative art and give a glimpse into a different approach to learning data science. Before I do that, I have to say, I feel like I'm only talking here today because I stopped working 10 months ago. Let me explain. I didn't go off the deep end and quit my job or anything, but as you can see here...\"\ntransition: fade\n---\n\n\n##  {background-color=\"#1a1a1a\" background-image=\"images/intro_back.png\" background-size=\"cover\"}\n\n<center>\n\n![A snapchat picture of me showing my baby bump at 37 weeks](images/whale_bump.jpg){width=\"700\"}\n\n</center>\n\n::: notes\n-   I was very pregnant and ready to pop.\n\n-   I gave birth to a beautiful baby.\n\n-   Went on maternity leave for 6 months and I know it sounds fake, but...\n:::\n\n##  {background-color=\"#1a1a1a\" background-image=\"images/intro_back.png\" background-size=\"cover\"}\n\n<center>\n\n![A shot of me coding in R Studio while watching a baby monitor](images/unreal.jpg){width=\"1000\"}\n\n</center>\n\n::: notes\n-   I actually found time to code on leave.\n\n-   But I had a rule for myself\n\n-   to only code if it was for fun stuff like art...\n:::\n\n##  {background-color=\"#1a1a1a\" background-image=\"images/intro_back.png\" background-size=\"cover\"}\n\n<center>\n\n![Some artwork I made on maternity leave](images/roundup.png){.false width=\"1300\"}\n\n</center>\n\n::: notes\n-   By the end of my leave\n\n-   I was amazed at how coding art like this\n\n-   helped with practical data science skills.\n\n-   I credit this for smoothing out my transition back into work and Today, I want to give a glimpse into how that was possible\n:::\n\n##  {background-color=\"#1a1a1a\" background-image=\"images/background1.png\" background-size=\"cover\"}\n\n<br> <br> <br> <br> <br> <br> <br> <br> <br>\n\n<center>\n\n<h1>Disclaimer</h1>\n\n</center>\n\n::: notes\n-   I want to give a disclaimer\n-   it's OK if you don't know how to make generative art.\n-   It's OK if you don't even like art.\n-   It's OK if you don't know much about data science.\n-   My hope is that you treat this talk like a \"choose-your-own-adventure\".\n-   Just like those old goosebumps books...\n-   I'm not the only old person in here who remembers those right?\n-   They kinda looked like this...\n:::\n\n##  {background-color=\"#7a2929\"}\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/ga1.png)\n:::\n\n::: {.column width=\"50%\"}\n![](images/ga2.png)\n:::\n:::\n\n::: notes\nSo whether you're here for the art {pause}\n:::\n\n##  {background-color=\"#7a2929\"}\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/ds1.png)\n:::\n\n::: {.column width=\"50%\"}\n![](images/ds2.png)\n:::\n:::\n\n::: notes\nor the data science... {pause}\n:::\n\n##  {background-color=\"#7a2929\"}\n\n<center>\n\n![](images/learn1.png){width=\"50%\"}\n\n<center>\n\n::: notes\n...or just learning, {pause}\n\n-   I'm hoping there will be something for you to take away from this today.\n\n-   So let's get started....\n:::\n\n## What are we Talking About Today? {.black background-color=\"#1a1a1a\" background-image=\"images/map1.png\" background-size=\"cover\"}\n\n<div>\n\n-   <h3>What is Generative Art?</h3>\n\n</div>\n\n## What are we Talking About Today? {.black background-color=\"#1a1a1a\" background-image=\"images/map2.png\" background-size=\"cover\"}\n\n<div>\n\n-   <h3>What is Generative Art?</h3>\n\n-   <h3>How Can we Make Generative Art in R or Python?</h3>\n\n</div>\n\n## What are we Talking About Today? {.black background-color=\"#1a1a1a\" background-image=\"images/map3.png\" background-size=\"cover\"}\n\n<div>\n\n-   <h3>What is Generative Art?</h3>\n\n-   <h3>How Can we Make Generative Art in R or Python?</h3>\n\n-   <h3>Benefits of Creating Generative Art</h3>\n\n</div>\n\n## What are we Talking About Today? {.black background-color=\"#1a1a1a\" background-image=\"images/map4.png\" background-size=\"cover\"}\n\n<div>\n\n-   <h3>What is Generative Art?</h3>\n\n-   <h3>How Can we Make Generative Art in R or Python?</h3>\n\n-   <h3>Benefits of Creating Generative Art</h3>\n\n-   <h3>What is Data Science?</h3>\n\n</div>\n\n## What are we Talking About Today? {.black background-color=\"#1a1a1a\" background-image=\"images/map5.png\" background-size=\"cover\"}\n\n<div>\n\n-   <h3>What is Generative Art?</h3>\n\n-   <h3>How Can we Make Generative Art in R or Python?</h3>\n\n-   <h3>Benefits of Creating Generative Art</h3>\n\n-   <h3>What is Data Science?</h3>\n\n-   <h3>Examples of How Generative Art Translates into Data Science</h3>\n\n</div>\n\n## What are we Talking About Today? {.black background-color=\"#1a1a1a\" background-image=\"images/map6.png\" background-size=\"cover\"}\n\n<div>\n\n-   <h3>What is Generative Art?</h3>\n\n-   <h3>How Can we Make Generative Art in R or Python?</h3>\n\n-   <h3>Benefits of Creating Generative Art</h3>\n\n-   <h3>What is Data Science?</h3>\n\n-   <h3>Examples of How Generative Art Translates into Data Science</h3>\n\n-   <h3>Final Thoughts</h3>\n\n</div>\n\n##  {background-color=\"#1a1a1a\" background-image=\"images/background2.png\" background-size=\"cover\"}\n\n<br> <br> <br> <br> <br> <br> <br> <br> <br>\n\n<center>\n\n<h1>What is Generative Art?</h1>\n\n</center>\n\n::: notes\nSo I want to pose a question to you all, you don't have to answer me, but just think for a second, what do ***you*** think generative art is?\n\n-   Is it opening up a digital sketchpad and physically drawing on a screen?\n-   Or creating outputs from AI art platforms like Dall-E or Lensa?\n\nI couldn't find an official definition for you all, so I'm making one right here, right now.\n:::\n\n## What is Generative Art? {.purple background-color=\"#6c4161\"}\n\n<br> <br>\n\nIn this room today, Generative Art is defined as:\n\n<br> <br>\n\n> **Artwork created through a program in any language or interface. As long as a program executes the generation of the art, it can be considered generative art.**\n\n::: notes\nNow this is vague and general, and yes. that's on purpose\n\n<br>\n\n-   Because I can guarantee you, that there are multiple definitions of generative art floating around in your minds, collectively in this room right now.\n\n-   And I'm also going to make an assumption that at least one person in here is thinking of AI art.\n\n-   So I want to address this now... I don't know much about AI art and I've actually only made it once..\n:::\n\n## What is Generative Art? - Distinctions {.purple background-color=\"#6c4161\" auto-animate=\"true\"}\n\n::: {style=\"position: relative; float: center; margin-top: 100px;\"}\n<center>![](images/ai_art_ex.png){fig-alt=\"A vast, cosmic, and beautiful galaxy with swirling blue, purple, and pink colors in the background. In the foreground a vibrantly colored planet directly in front of the sun.\" width=\"800\"}</center>\n:::\n\n::: notes\n-   Which produced this lovely piece here.\n\n-   As beautiful as this is, I'm really not qualified to talk about AI art\n\n-   but there are two things that I want to clarify in regards to AI art and automation ...\n:::\n\n## What is Generative Art? - Distinctions {.purple background-color=\"#6c4161\" auto-animate=\"true\"}\n\n::: columns\n::: {.column style=\"position: relative; float: left; margin-top: 100px; width='50%';  margin-right:0px;\"}\n<center>![](images/ai_art_ex.png){fig-alt=\"A vast, cosmic, and beautiful galaxy with swirling blue, purple, and pink colors in the background. In the foreground a vibrantly colored planet directly in front of the sun.\" width=\"800\"}</center>\n:::\n:::\n\n::: {.column width=\"50%\"}\n<br><br>\n\n-   While all AI Art is generative art...\n\n-   All generative art **IS NOT** AI art\n\n<br>\n\n<center>&</center>\n\n<br>\n\n-   While some generative art is randomly calculated by the computer...\n\n-   Some generative art is intentional and deliberately calculated by a human\n:::\n\n::: notes\nNow..what do I mean by that...we'll see some examples now as we talk about...\n:::\n\n##  {background-color=\"#1a1a1a\" background-image=\"images/background3.png\" background-size=\"cover\"}\n\n<br> <br> <br> <br> <br> <br> <br> <br> <br>\n\n<center>\n\n<h1>How Can we Make Generative Art<br>in R or Python?</h1>\n\n</center>\n\n::: notes\n-   Safe to say we have some \"data\" people in here\n-   Maybe safe to say most of you have probably created data visualizations with R or Python.\n-   I will say that if you know how to make visuals in R or Python, you're already on your way to making generative art...\n:::\n\n## How Can we Make Generative Art in R or Python? {.mutedblue background-color=\"#4e5483\"}\n\n<br> <br> <br>\n\n<center>\n\n::: {#bluequote}\n> Making generative art might not be as hard as you think...\n>\n> You just need ✨data✨ and to\n>\n> [Think outside the grid](https://thetidytrekker.com/post/thinking-outside-the-grid/thinking-outside-the-grid.html) 📊 of your favorite graphical software/package\n:::\n\n</center>\n\n::: notes\nNow...\n\nI'm going to be real with ya'll, I don't have enough time here to truly explain in depth how to make complicated art with R or python, or flesh this concept out, but All of the code for the art you'll see in today is available right now in this talk's github repo so you can listen to me make an attempt at giving a crash course right now, but after the dust is settled and you're back home, know that these resources are available to you to digest later.\n:::\n\n## How Can we Make Generative Art in R or Python? {.mutedblue background-color=\"#4e5483\"}\n\n<br><br>\n\n<center>\n\n<h3>Some \"Primitive\" Graphical Tools🛠</h3>\n\n</center>\n\n<br> <br>\n\n::: columns\n::: {.column width=\"50%\"}\n<center>**R Packages** ![](images/r_logo.png)</center>\n\n<center>\n\n-   [`ggplot2`](https://ggplot2.tidyverse.org/)\n-   Base R w/ `plot()` or [`grid`](https://www.stat.auckland.ac.nz/~paul/grid/grid.html)\n-   [`r2D3`](https://rstudio.github.io/r2d3/)\n-   [`lattice`](http://lattice.r-forge.r-project.org/)\n\n</center>\n:::\n\n::: {.column width=\"50%\"}\n<center>**Python Libraries** ![](images/python_logo.png)</center>\n\n<center>\n\n-   [`plotnine`](https://plotnine.readthedocs.io/en/stable/)\n-   [`pillow` (PIL)](https://pypi.org/project/Pillow/)\n-   [`matplotlib`](https://matplotlib.org/)\n-   [`turtle`](https://docs.python.org/3/library/turtle.html)\n\n</center>\n:::\n:::\n\n<br><br>\n\n<center>*If it lets you plot data, it will let you make art...*</center>\n\n::: notes\n-   When first starting out, picking a data visualization package or library that you are already familiar with can be helpful.\n\n-   My personal favorite is ggplot2 in R\n\n-   But you can choose whatever language and graphical tool you'd like.\n\n-   The main point is: if a tool lets you plot data, it will let you make art.\n\n-   The challenge come in: when you need to understand how data translates into a visual.\n\n-   Without fail, whenever I do a talk like this, there's always somebody who says...\n:::\n\n## How Can we Make Generative Art in R or Python? {.mutedblue background-color=\"#4e5483\"}\n\n<br><br>\n\n<center>\n\n::: {#bluequote}\n> \"I don't understand how you get the data to put into \\[ *insert your graphical tool of choice here* \\]\"\n:::\n\n<br><br><br>\n\n![](images/confused.gif){width=\"50%\"}\n\n</center>\n\n::: notes\nAnd I get it. It can be tricky, so let's stop for a minute and Imagine that we want to draw a line on a piece paper, like, in the real world...\n:::\n\n## How Can we Make Generative Art in R or Python? {.mutedblue background-color=\"#4e5483\"}\n\n<br> <br>\n\n<center>![](images/line_ex.gif){.false}</center>\n\n::: notes\n-   If someone is physically able to pick up a pen and use it\n\n-   We might assume it's easy for them to draw a single line on a paper\n\n-   We can make the argument that it might not be a straight line without some guidance though, so maybe we switch to using graph paper instead...\n:::\n\n## How Can we Make Generative Art in R or Python? {.mutedblue background-color=\"#4e5483\"}\n\n<center>![](images/graph_ex.gif){.false width=\"60%\"}</center>\n\n::: notes\n-   Now this may be way easier to people because there's a visual guide now. the grid lines here.\n\n-   But if you stop for a minute and think...where have we probably seen a grid before?\n\n-   Possibly in your favorite visualization tools, for me, it's ggplot2. The grid lines reminds me of the coordinate system all ggplots are created on...\n:::\n\n## How Can we Make Generative Art in R or Python? {.mutedblue background-color=\"#4e5483\"}\n\n<center>![](images/graph_ex2.gif){.false width=\"60%\"}</center>\n\n::: notes\n-   So now using a grid as guidance, in the real world..\n\n-   we can set values to every mark we make on the paper.\n\n-   Just like a coordinate system in your favorite graphical tool would\n\n-   We have 4 coordinate points in this line, each with an x and y value\n\n-   Where we have 4 values from 1 to 4 on the X axis horizontally\n\n-   and a constant value of 1 on the y axis repeated 4 times to make a straight horizontal line.\n\n-   Now this may be simple, but this is essentially all it takes to create generative art.\n\n-   The trick here is that you need to understand the relationship between the visuals you want, and the data you need to make them in regards to a coordinate system.\n\n-   Let's look at this in more detail, without getting into too much detail...because time...\n:::\n\n## How Can we Make Generative Art in R or Python? {.mutedblue background-color=\"#4e5483\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n<u>**A Simple Example *(In Python)***</u>\n:::\n\n::: columns\n::: {.column width=\"55%\"}\n\n::: {.cell}\n\n```{.python .cell-code  code-line-numbers=\"1-5\"}\n#===============================================================#\n# Library Load-in------------------------------------------------\n#===============================================================#\nfrom plotnine import *\nimport pandas as pd\n\n#===============================================================#\n# Image Options--------------------------------------------------\n#===============================================================#\n#Set the color\norange_hex = \"#FFBB58\"\n\n#Set the width\nchonk = 10\n\n#===============================================================#\n# Data Creation--------------------------------------------------\n#===============================================================#\nline = pd.DataFrame({\"x\" : list(range(0,5)),\n                     \"y\" : 1,\n                     \"color\" : orange_hex,\n                     \"size\" : chonk})\n\n#===============================================================#\n# Plot Creation--------------------------------------------------\n#===============================================================#\norange_line = (ggplot(line, aes(\"x\", \"y\"))+\n               geom_path(color = line.loc[:,\"color\"],\n                         size = line.loc[:,\"size\"])+\n               coord_equal(ylim = (0,3), xlim = (0,4)))\n\n#View the plot\nprint(orange_line)\n```\n:::\n\n:::\n\n::: {.column width=\"45%\"}\n<br><br>\n\n<center>![](images/python_ex1.png){width=\"100%\"}</center>\n:::\n:::\n\n::: notes\n-   There can be different approaches to creating that chunky orange line, but here's one way in python.\n\n-   Now without getting too bogged down in the specific of the code, let's pay attention to the process\n\n-   First you load in your libraries you need.\n:::\n\n## How Can we Make Generative Art in R or Python? {.mutedblue background-color=\"#4e5483\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n<u>**A Simple Example *(In Python)***</u>\n:::\n\n::: columns\n::: {.column width=\"55%\"}\n\n::: {.cell}\n\n```{.python .cell-code  code-line-numbers=\"1-5,7-14\"}\n#===============================================================#\n# Library Load-in------------------------------------------------\n#===============================================================#\nfrom plotnine import *\nimport pandas as pd\n\n#===============================================================#\n# Image Options--------------------------------------------------\n#===============================================================#\n#Set the color\norange_hex = \"#FFBB58\"\n\n#Set the width\nchonk = 10\n\n#===============================================================#\n# Data Creation--------------------------------------------------\n#===============================================================#\nline = pd.DataFrame({\"x\" : list(range(0,5)),\n                     \"y\" : 1,\n                     \"color\" : orange_hex,\n                     \"size\" : chonk})\n\n#===============================================================#\n# Plot Creation--------------------------------------------------\n#===============================================================#\norange_line = (ggplot(line, aes(\"x\", \"y\"))+\n               geom_path(color = line.loc[:,\"color\"],\n                         size = line.loc[:,\"size\"])+\n               coord_equal(ylim = (0,3), xlim = (0,4)))\n\n#View the plot\nprint(orange_line)\n```\n:::\n\n:::\n\n::: {.column width=\"45%\"}\n<br><br>\n\n<center>![](images/python_ex1.png){width=\"100%\"}</center>\n:::\n:::\n\n::: notes\n-Next, you can do some prep for your data.\n\n-Here, just setting values for color and size\n:::\n\n## How Can we Make Generative Art in R or Python? {.mutedblue background-color=\"#4e5483\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n<u>**A Simple Example *(In Python)***</u>\n:::\n\n::: columns\n::: {.column width=\"55%\"}\n\n::: {.cell}\n\n```{.python .cell-code  code-line-numbers=\"1-5,7-14,16-22\"}\n#===============================================================#\n# Library Load-in------------------------------------------------\n#===============================================================#\nfrom plotnine import *\nimport pandas as pd\n\n#===============================================================#\n# Image Options--------------------------------------------------\n#===============================================================#\n#Set the color\norange_hex = \"#FFBB58\"\n\n#Set the width\nchonk = 10\n\n#===============================================================#\n# Data Creation--------------------------------------------------\n#===============================================================#\nline = pd.DataFrame({\"x\" : list(range(0,5)),\n                     \"y\" : 1,\n                     \"color\" : orange_hex,\n                     \"size\" : chonk})\n\n#===============================================================#\n# Plot Creation--------------------------------------------------\n#===============================================================#\norange_line = (ggplot(line, aes(\"x\", \"y\"))+\n               geom_path(color = line.loc[:,\"color\"],\n                         size = line.loc[:,\"size\"])+\n               coord_equal(ylim = (0,3), xlim = (0,4)))\n\n#View the plot\nprint(orange_line)\n```\n:::\n\n:::\n\n::: {.column width=\"45%\"}\n<br><br>\n\n<center>![](images/python_ex1.png){width=\"100%\"}</center>\n:::\n:::\n\n::: notes\n-   Next, you can start creating your data sources = these are things you'll feed into your graphical tool of choice.\n\n-   Here, it's a pandas dataframe with coordinates (x and y), color, and size\n:::\n\n## How Can we Make Generative Art in R or Python? {.mutedblue background-color=\"#4e5483\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n<u>**A Simple Example *(In Python)***</u>\n:::\n\n::: columns\n::: {.column width=\"55%\"}\n\n::: {.cell}\n\n```{.python .cell-code  code-line-numbers=\"1-5,7-14,16-22,24-33\"}\n#===============================================================#\n# Library Load-in------------------------------------------------\n#===============================================================#\nfrom plotnine import *\nimport pandas as pd\n\n#===============================================================#\n# Image Options--------------------------------------------------\n#===============================================================#\n#Set the color\norange_hex = \"#FFBB58\"\n\n#Set the width\nchonk = 10\n\n#===============================================================#\n# Data Creation--------------------------------------------------\n#===============================================================#\nline = pd.DataFrame({\"x\" : list(range(0,5)),\n                     \"y\" : 1,\n                     \"color\" : orange_hex,\n                     \"size\" : chonk})\n\n#===============================================================#\n# Plot Creation--------------------------------------------------\n#===============================================================#\norange_line = (ggplot(line, aes(\"x\", \"y\"))+\n               geom_path(color = line.loc[:,\"color\"],\n                         size = line.loc[:,\"size\"])+\n               coord_equal(ylim = (0,3), xlim = (0,4)))\n\n#View the plot\nprint(orange_line)\n```\n:::\n\n:::\n\n::: {.column width=\"45%\"}\n<br><br>\n\n<center>![](images/python_ex1.png){width=\"100%\"}</center>\n:::\n:::\n\n::: notes\n-   Finally, we feeding the data in to ggplot fxs, and create the line\n\n-   Simple enough, let's look at something more complicated in R\n:::\n\n## How Can we Make Generative Art in R or Python? {.mutedblue background-color=\"#4e5483\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n<u>**A More Complicated Example *(In R)***</u>\n:::\n\n::: columns\n::: {.column width=\"55%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Library Load-ins-----------------------------------------------\nlibrary(ggplot2); library(dplyr); library(artpack)\n\n# Let's make a basic \"cityscape\" with a moon \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Plot Creation--------------------------------------------------\n#Data Goes Here |>\n  ggplot(aes(x,y)) +\n  theme_void() +\n  coord_cartesian(expand = FALSE, xlim = c(0,4), ylim = c(0,3))\n #....\n```\n:::\n\n:::\n\n::: {.column width=\"45%\"}\n<br><br>\n\n<center>![](images/blank_ggplot.png){width=\"100%\"}</center>\n:::\n:::\n\n::: notes\n-   Again, Try not to focus too much on specific code\n\n-   but just observe the general relationship going on here between the data and the visual\n\nThis time, start with your libraries..and an idea of what to make - cityscape\n:::\n\n## How Can we Make Generative Art in R or Python? {.mutedblue background-color=\"#4e5483\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n<u>**A More Complicated Example *(In R)***</u>\n:::\n\n::: columns\n::: {.column width=\"55%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4-11,16-22\"}\n# Library Load-ins-----------------------------------------------\nlibrary(ggplot2); library(dplyr); library(artpack)\n\n# Data for the sky-----------------------------------------------\ndf_sky <- tibble(x = 0,\n                 xend = 4,\n                 y = seq(0,3, length = 100),\n                 yend = y,\n                 color = art_pals(\"sunnyside\", n = 100),\n                 linewidth = 10\n                 )\n\n\n\n\n# Plot Creation--------------------------------------------------\ndf_sky |>\n  ggplot(aes(x,y, xend = xend, yend = yend,)) +\n  theme_void() +\n  coord_cartesian(expand = FALSE, xlim = c(0,4), ylim = c(0,3)) +\n  geom_segment(color = df_sky$color,\n               linewidth = df_sky$linewidth) \n\n\n\n\n\n\n\n\n\n#...\n```\n:::\n\n:::\n\n::: {.column width=\"45%\"}\n<br><br>\n\n<center>![](images/sky_ggplot.png){width=\"100%\"}</center>\n:::\n:::\n\n::: notes\n-   Want to make a sky in background.\n-   I want to use geom_segment, so that requires 2 x points and 2 y points to easily create a line.\n-   That choice prompts me to set up a tibble named df_sky, that will translate into a sequence of horizontal lines on the plot with a gradient of colors applied to it from bottom to top.\n-   We can see the result of this data frame plotted here.\n:::\n\n## How Can we Make Generative Art in R or Python? {.mutedblue background-color=\"#4e5483\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n<u>**A More Complicated Example *(In R)***</u>\n:::\n\n::: columns\n::: {.column width=\"55%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4-15,18-30\"}\n# Library Load-ins-----------------------------------------------\nlibrary(ggplot2); library(dplyr); library(artpack)\n\n# Data for the stars---------------------------------------------\ndf_stars <- tibble(\n  x = seq(0,4, l = 50),\n  y = seq(0,3, l = 50)\n) |>\n  expand.grid() |>\n  mutate(\n    color = \"white\",\n    size = sample(seq(.01,.2, l = 25), 2500, replace = TRUE),\n    alpha = sample(seq(.1,.7, l = 25), 2500, replace = TRUE)\n  ) |>\n  slice_sample(prop = .2)\n\n\n# Plot Creation--------------------------------------------------\ndf_sky |>\n  ggplot(aes(x,y, xend = xend, yend = yend,)) +\n  theme_void() +\n  coord_cartesian(expand = FALSE, xlim = c(0,4), ylim = c(0,3)) +\n  geom_segment(color = df_sky$color,\n               linewidth = df_sky$linewidth) +\n  geom_point(data = df_stars, aes(x,y),\n             alpha = df_stars$alpha,\n             color = df_stars$color,\n             size = df_stars$size,\n             position = position_jitter(width = .1, height = .1),\n             inherit.aes = FALSE) \n\n#...\n```\n:::\n\n:::\n\n::: {.column width=\"45%\"}\n<br><br>\n\n<center>![](images/stars_ggplot.png){width=\"100%\"}</center>\n:::\n:::\n\n::: notes\n-Next, we can create some stars by creating a grid of points, applying a color, a sample of numbers for sizes, and transparency values in the tibble - Then randomly selecting 20% of the data out to get this spaced out visual of stars in the sky that we see here...\n:::\n\n## How Can we Make Generative Art in R or Python? {.mutedblue background-color=\"#4e5483\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n<u>**A More Complicated Example *(In R)***</u>\n:::\n\n::: columns\n::: {.column width=\"55%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-8,10-29\"}\n# Data for the moon----------------------------------------------\ndf_moon <- tibble(\n  x = 2,\n  y = 1.5,\n  size = 100,\n  fill = \"#f0e4bb\",\n  color = \"#000000\"\n)\n\n# Plot Creation--------------------------------------------------\ndf_sky |>\n  ggplot(aes(x,y, xend = xend, yend = yend,)) +\n  theme_void() +\n  coord_cartesian(expand = FALSE, xlim = c(0,4), ylim = c(0,3)) +\n  geom_segment(color = df_sky$color,\n               linewidth = df_sky$linewidth) +\n  geom_point(data = df_stars, aes(x,y),\n             alpha = df_stars$alpha,\n             color = df_stars$color,\n             size = df_stars$size,\n             position = position_jitter(width = .1, height = .1),\n             inherit.aes = FALSE) +\n  geom_point(data = df_moon, aes(x,y),\n             color = df_moon$color,\n             fill = df_moon$fill,\n             size = df_moon$size,\n             shape = 21,\n             stroke = .5,\n             inherit.aes = FALSE) \n\n\n#...\n```\n:::\n\n:::\n\n::: {.column width=\"45%\"}\n<br><br>\n\n<center>![](images/moon_ggplot.png){width=\"100%\"}</center>\n:::\n:::\n\n::: notes\n-   Next, let's say we want to have a simple, big moon.\n-   We can do this easily by creating data for a single point, setting a big value for it's size and color options\n-   while making sure to tweak the geom_point function in the plot with the shape and stroke arguments in the ggplot functions down here...\n:::\n\n## How Can we Make Generative Art in R or Python? {.mutedblue background-color=\"#4e5483\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n<u>**A More Complicated Example *(In R)***</u>\n:::\n\n::: columns\n::: {.column width=\"55%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data for the buildings-----------------------------------------\ndf_buildings <- tibble(\n  x = 0:4,\n  xend = x, \n  y = 0,\n  yend = sample(seq(.5,2, l = 10), 5, replace = TRUE),\n  color = \"#000000\",linewidth = 60\n)\n\n\n# Plot Creation--------------------------------------------------\ndf_sky |>\n  ggplot(aes(x,y, xend = xend, yend = yend)) +\n  theme_void() +\n  coord_cartesian(expand = FALSE, xlim = c(0,4), ylim = c(0,3)) +\n  geom_segment(color = df_sky$color,\n               linewidth = df_sky$linewidth) +\n  geom_point(data = df_stars, aes(x,y),\n             alpha = df_stars$alpha,\n             color = df_stars$color,\n             size = df_stars$size,\n             position = position_jitter(width = .1, height = .1),\n             inherit.aes = FALSE) +\n  geom_point(data = df_moon, aes(x,y),\n             color = df_moon$color,\n             fill = df_moon$fill,\n             size = df_moon$size,\n             shape = 21,\n             stroke = .5,\n             inherit.aes = FALSE) +\n  geom_segment(data = df_buildings, color = df_buildings$color,\n               linewidth = df_buildings$linewidth)\n```\n:::\n\n:::\n\n::: {.column width=\"45%\"}\n<br><br>\n\n<center>![](images/buildings_ggplot.png){width=\"100%\"}</center>\n:::\n:::\n\n::: notes\n-   Finally, we can decide to use geom_segment again and create thick vertical chunks of lines this time that makes a basic silhouette of some buildings.\n-   Done again by storing this in a tibble called df_buildings and using geom_segment here... This may have been alot to see, but the main point is that...\n:::\n\n## How Can we Make Generative Art in R or Python? {.mutedblue background-color=\"#4e5483\"}\n\n<br> <br>\n\n<center>\n\n::: {#bluequote}\n> The concept of translating data into visuals is the same no matter how simple or complex a piece is...\n:::\n\n<br> <br>\n\n::: {#bluequote}\n> The **hard** part is usually the programming or the math🤢\n:::\n\n</center>\n\n::: notes\nSo now that everyone is up to speed about what generative art is, and you have some idea of how it can be made, let's talk about the benefits of making art like this\n:::\n\n##  {background-color=\"#1a1a1a\" background-image=\"images/background4.png\" background-size=\"cover\"}\n\n<br> <br> <br> <br> <br> <br>\n\n<center>\n\n<h1>Benefits of Creating<br>Generative Art</h1>\n\n</center>\n\n::: notes\n-   Theres lots of benefits to making art like this.\n-   One of the biggest and obvious is just \"learning\" in general. And it got me to thinking about something...\n:::\n\n## Benefits of Creating Generative Art {.turq background-color=\"#3a7188\"}\n\n::: columns\n::: {.column width=\"50%\"}\n<center>![](images/idea.gif){.false width=\"100%\"}</center>\n:::\n\n::: {.column width=\"50%\"}\n<br><br>\n\n<center>\n\n::: {#turqquote}\n> People may learn better when they are doing something they enjoy 🤯\n:::\n\n</center>\n\n<br><br>\n\n<center>\n\n::: fragment\n::: {#turqquote}\n> If you enjoy creating art...you might learn some things 🤔\n:::\n:::\n\n</center>\n:::\n:::\n\n::: notes\n-   I have an idea that.. {first} -> next click ->\n\n{after} - I'm not trying to be funny, I can't just stand up here and say this is a proven fact. I'm not an expert in determining how people learn efficiently...but the best I can do is give you personal examples of my experience with creating generative art...\n:::\n\n## Benefits of Creating Generative Art {.turq background-color=\"#3a7188\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n### The Obvious 🎨\n\n-   Improved Data Visualization Skills\n\n<center>![](images/first_tt){width=\"80%\"}</center>\n:::\n\n::: notes\nAn example I love to use for this are my tidy Tuesday submissions.. you know, that weekly data viz challenge we have? Used to be super popular on Twitter before it became a hellsite.. This was my first submission...and you couldn't tell me NOTHING. I felt so proud of this. And honestly, I had every reason to be. Making this was a great accomplishment at the time because I taught myself how to do it.\n:::\n\n## Benefits of Creating Generative Art {.turq background-color=\"#3a7188\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n### The Obvious 🎨\n\n-   Improved Data Visualization Skills\n\n<center>![](images/mid_tt){width=\"45%\"}</center>\n:::\n\n::: notes\nThis was my work after about 2 months of creating generative art...\n:::\n\n## Benefits of Creating Generative Art {.turq background-color=\"#3a7188\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n### The Obvious 🎨\n\n-   Improved Data Visualization Skills\n\n<center>![](images/last_tt){width=\"75%\"}</center>\n:::\n\n::: notes\nAnd my most recent tidy tuesday I did this year... obviously, i deveolped knowledge of how to make things more aesthetically pleasing, and how to hack my tool of choice for some coll results.\n:::\n\n## Benefits of Creating Generative Art {.turq background-color=\"#3a7188\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n### The Abstract 🧠\n\n-   Mathematical/Logical Reasoning\n\n<center>![](images/logic_ex1.png)</center>\n:::\n\n::: notes\nNow for some more abstract examples...\n\nImagine how PISSED I was when I found out math was involved to make art..\n\nArt can require you to be knowledgeable about patterns, numeric sequences, and general logic..\n\nlogical reasoning is what makes it possible to go from a grid of points like this...\n:::\n\n## Benefits of Creating Generative Art {.turq background-color=\"#3a7188\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n### The Abstract 🧠\n\n-   Mathematical/Logical Reasoning\n\n<center>![](images/logic_ex2.png)</center>\n:::\n\n::: notes\nTo a grid with skipped patterns like this...\n:::\n\n## Benefits of Creating Generative Art {.turq background-color=\"#3a7188\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n### The Abstract 🧠\n\n-   Mathematical/Logical Reasoning\n\n<center>![](images/logic_ex3.png)</center>\n:::\n\n::: notes\nTo a finished piece of art like this, without having to manually create the data for every single pixel shown here.\n:::\n\n## Benefits of Creating Generative Art {.turq background-color=\"#3a7188\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n### The Abstract 🧠\n\n-   Functional Programming\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Custom FX from the Functions in Rtistry Workshop -\n# Found Here: https://thetidytrekker.com/talks/functions_in_rtistry/functions_for_rtistry\n\ncircle_randomizer(\n  color_pal = \"random\",\n  border_color = \"random\",\n  crowding = \"random\",\n  coordinates = \"random\"\n  )\n```\n:::\n\n\n::: columns\n::: {.column width=\"33%\"}\n![](images/fx_ex2.png)\n:::\n\n::: {.column width=\"33%\"}\n<br><br>\n\n![](images/fx_ex1.png)\n:::\n\n::: {.column width=\"33%\"}\n![](images/fx_ex3.png)\n:::\n:::\n:::\n\n::: notes\nWanting to create more complicated art is natural the longer you do it. You start to realize how helpful it is to learn more about programming in general. Art is why I created my first function ever in R.\n:::\n\n## Benefits of Creating Generative Art {.turq background-color=\"#3a7188\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n### The Unexpected 😲\n\n-   The [#genartclub](https://twitter.com/search?q=%23genartclub&src=typed_query) and [#rtistry](https://fosstodon.org/search) community\n\n<center>![](images/tweet_ex.png){width=\"50%\"}</center>\n:::\n\n::: notes\nGave me another reason to interact with people and share what I was doing...\n:::\n\n## Benefits of Creating Generative Art {.turq background-color=\"#3a7188\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n<h3>The Unexpected 😲</h3>\n\n-   Package Development - [{artpack}](https://meghansaha.github.io/artpack/)\n:::\n\n::: columns\n::: {.column width=\"50%\"}\n<center>![](images/artpack.png){.false width=\"100%\"}</center>\n:::\n\n::: {.column width=\"50%\"}\n<br><br><br>\n\n-   My first ever package!\n-   *Data-centric* Rtistry Toolkit\n-   Early development, but things are coming\n-   Now available on [CRAN](https://cloud.r-project.org/web/packages/artpack/index.html) 🎉\n:::\n:::\n\n::: notes\nYes, I made a package - Huge accomplishment for me!\n:::\n\n## Benefits of Creating Generative Art {.turq background-color=\"#3a7188\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n<h3>The Unexpected 😲</h3>\n\n-   Art Store - [\"Tidy Treks\"](https://www.etsy.com/shop/TidyTreks)\n:::\n\n::: columns\n::: {.column width=\"50%\"}\n<center>![](images/tidytreks.png){width=\"100%\"}</center>\n:::\n\n::: {.column width=\"50%\"}\n<center>\n\n![](images/artex.png){.false width=\"70%\"}\n\nA few fancy canvases, posters, and novelties - all created with R\n\n</center>\n:::\n:::\n\n::: notes\nYes, I finally got over some anxiety and made a store!\n:::\n\n## Benefits of Creating Generative Art {.turq background-color=\"#3a7188\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n<h3>The Unexpected 😲</h3>\n\n-   Rtistry Textbook?! - \"Rtistry: Methods For Visual Generative Art Using R\"\n:::\n\n::: columns\n::: {.column width=\"50%\"}\n<center>![](images/book_snip.png){width=\"100%\"}</center>\n:::\n\n::: {.column width=\"50%\"}\n<br><br><br>\n\n-   Yes!!\n-   Co-authored with [Antonio Páez](https://fosstodon.org/@paezha@mastodon.online), [Antonio Chinchón](https://twitter.com/aschinchon), and [Jacquie Tran](https://fosstodon.org/@jacquietran@mastodon.social)\n-   First open-sourced textbook dedicated to teaching readers how to create generative art in R\n:::\n:::\n\n::: notes\nYes, I made a package - Huge accomplishment for me!\n:::\n\n## Benefits of Creating Generative Art {.turq background-color=\"#3a7188\"}\n\n::: {style=\"padding-bottom: 20px;\"}\n<h3>The Most Important ❤️</h3>\n\n-   It's therapeutic, fun, and (mostly) low-stress\n\n<center>![](images/heart.png){width=\"50%\"}</center>\n:::\n\n::: notes\nI owe alot to generative art, the tidyverse, and the R community. My life has changed and been enriched some much because of R and the tidyverse, and now because of this art as well.\n:::\n\n##  {background-color=\"#1a1a1a\" background-image=\"images/background5.png\" background-size=\"cover\"}\n\n<br> <br> <br> <br> <br> <br> <br>\n\n<center>\n\n<h1>What is Data Science?</h1>\n\n</center>\n\n## What is Data Science? {.green background-color=\"#657750\"}\n\n##  {background-color=\"#1a1a1a\" background-image=\"images/background6.png\" background-size=\"cover\"}\n\n<br> <br> <br> <br> <br> <br> <br> <br> <br>\n\n<center>\n\n<h1>Examples of How Generative Art Translates into Data Science</h1>\n\n</center>\n\n## Examples of How Generative Art Translates into Data Science {.yellow background-color=\"#ba9c5e\"}\n\n##  {background-color=\"#1a1a1a\" background-image=\"images/background7.png\" background-size=\"cover\"}\n\n<br> <br> <br> <br> <br> <br> <br> <br> <br>\n\n<center>\n\n<h1>Final Thoughts</h1>\n\n</center>\n\n## Final Thoughts {.orange background-color=\"#bb743e\"}\n",
    "supporting": [
      "a_case_for_genart_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}