---
title: "It's All About Perspective"
subtitle: "Making A Case for Generative Art"
author: "Meghan Harris, MPH"
institute: "Posit::conf(2023)"
date: "09-20-2023"
date-format: "MMMM Do, YYYY | YYYY-MM-DD"
format:
  revealjs: 
    slide-number: true
    width: 1690
    height: 1080
    linkcolor: "#ffffff"
    highlight-style: github
    code-copy: true
    code-overflow: scroll
    code-block-bg: true
    
    transition: fade
css: "scripts/style.css"
editor: visual
title-slide-attributes: 
  data-background-image: "images/background.png"
  data-background-size: "stretch"
  data-background-position: "center"
  data-background-color: "#1a1a1a"
  data-notes: "Hello, Im Meghan Harris, I'm a data scientist at the Prostate Cancer Clinical Trials Consortium, and I'm also a generative artist that's here to introduce you all to generative art and give a glimpse into a different approach to learning data science. Before I do that, I have to say, I feel like I'm only talking here today because I stopped working 10 months ago. Let me explain. I didn't go off the deep end and quit my job or anything, but as you can see here..."
transition: fade
---

##  {background-color="#1a1a1a" background-image="images/intro_back.png" background-size="cover"}

<center>

![A snapchat picture of me showing my baby bump at 37 weeks](images/whale_bump.jpg){width="700"}

</center>

::: notes
-   I was very pregnant and ready to pop.

-   I gave birth to a beautiful baby.

-   Went on maternity leave for 6 months and I know it sounds fake, but...
:::

##  {background-color="#1a1a1a" background-image="images/intro_back.png" background-size="cover"}

<center>

![A shot of me coding in R Studio while watching a baby monitor](images/unreal.jpg){width="1000"}

</center>

::: notes
-   I actually found time to code on leave.

-   But I had a rule for myself

-   to only code if it was for fun stuff like art...
:::

##  {background-color="#1a1a1a" background-image="images/intro_back.png" background-size="cover"}

<center>

![Some artwork I made on maternity leave](images/roundup.png){.false width="1300"}

</center>

::: notes
-   By the end of my leave

-   I was amazed at how coding art like this

-   helped with practical data science skills.

-   I credit this for smoothing out my transition back into work and Today, I want to give a glimpse into how that was possible
:::

##  {background-color="#1a1a1a" background-image="images/background1.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br> <br> <br>

<center>

<h1>Disclaimer</h1>

</center>

::: notes
-   I want to give a disclaimer
-   it's OK if you don't know how to make generative art.
-   It's OK if you don't even like art.
-   It's OK if you don't know much about data science.
-   My hope is that you treat this talk like a "choose-your-own-adventure".
-   Just like those old goosebumps books...
-   I'm not the only old person in here who remembers those right?
-   They kinda looked like this...
:::

##  {background-color="#7a2929"}

::: columns
::: {.column width="50%"}
![](images/ga1.png)
:::

::: {.column width="50%"}
![](images/ga2.png)
:::
:::

::: notes
So whether you're here for the art {pause}
:::

##  {background-color="#7a2929"}

::: columns
::: {.column width="50%"}
![](images/ds1.png)
:::

::: {.column width="50%"}
![](images/ds2.png)
:::
:::

::: notes
or the data science... {pause}
:::

##  {background-color="#7a2929"}

<center>

![](images/learn1.png){width="50%"}

<center>

::: notes
...or just learning, {pause}

-   I'm hoping there will be something for you to take away from this today.

-   So let's get started....
:::

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map1.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

</div>

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map2.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

-   <h3>How Can we Make Generative Art in R or Python?</h3>

</div>

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map3.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

-   <h3>How Can we Make Generative Art in R or Python?</h3>

-   <h3>Benefits of Creating Generative Art</h3>

</div>

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map4.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

-   <h3>How Can we Make Generative Art in R or Python?</h3>

-   <h3>Benefits of Creating Generative Art</h3>

-   <h3>What is Data Science?</h3>

</div>

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map5.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

-   <h3>How Can we Make Generative Art in R or Python?</h3>

-   <h3>Benefits of Creating Generative Art</h3>

-   <h3>What is Data Science?</h3>

-   <h3>Examples of How Generative Art Translates into Data Science</h3>

</div>

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map6.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

-   <h3>How Can we Make Generative Art in R or Python?</h3>

-   <h3>Benefits of Creating Generative Art</h3>

-   <h3>What is Data Science?</h3>

-   <h3>Examples of How Generative Art Translates into Data Science</h3>

-   <h3>Final Thoughts</h3>

</div>

##  {background-color="#1a1a1a" background-image="images/background2.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br> <br> <br>

<center>

<h1>What is Generative Art?</h1>

</center>

::: notes
So I want to pose a question to you all, you don't have to answer me, but just think for a second, what do ***you*** think generative art is?

-   Is it opening up a digital sketchpad and physically drawing on a screen?
-   Or creating outputs from AI art platforms like Dall-E or Lensa?

I couldn't find an official definition for you all, so I'm making one right here, right now.
:::

## What is Generative Art? {.purple background-color="#6c4161"}

<br> <br>

In this room today, Generative Art is defined as:

<br> <br>


> **Artwork created through a program in any language or interface. As long as a program executes the generation of the art, it can be considered generative art.**


::: notes
Now this is vague and general, and yes. that's on purpose

<br>

-   Because I can guarantee you, that there are multiple definitions of generative art floating around in your minds, collectively in this room right now.

-   And I'm also going to make an assumption that at least one person in here is thinking of AI art.

-   So I want to address this now... We are not talking about AI art today

-   and, In fact, I want to make two statements regarding AI art and automation...
:::

## What is Generative Art? {.purple background-color="#6c4161"}

<br><br>

<center>
>While all AI Art is generative art... <br> 

:::{.fragment}
>...All generative art **IS NOT** AI art 
:::

<br>

:::{.fragment}
&

<br>


> While some generative art is randomly calculated by the computer... <br>
:::

:::{.fragment}
>...Some generative art is intentional and deliberately calculated by a human
:::

</center>



##  {background-color="#1a1a1a" background-image="images/background3.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br> <br> <br>

<center>

<h1>How Can we Make Generative Art<br>in R or Python?</h1>

</center>

::: notes
-   Safe to say we have some "data" people in here
-   Maybe safe to say most of you have probably created data visualizations with R or Python.
-   I will say that if you know how to make visuals in R or Python, you're already on your way to making generative art...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<br> <br> <br>

<center>

::: {#bluequote}
> Making generative art might not be as hard as you think...
>
> You just need ✨data✨ and to
>
> [Think outside the grid](https://thetidytrekker.com/post/thinking-outside-the-grid/thinking-outside-the-grid.html) 📊 of your favorite graphical software/package
:::

</center>

::: notes
Now...

I'm going to be real with ya'll, I don't have enough time here to truly explain in depth how to make complicated art with R or python, or flesh this concept out, but All of the code for the art you'll see in today is available right now in this talk's github repo so you can listen to me make an attempt at giving a crash course right now, but after the dust is settled and you're back home, know that these resources are available to you to digest later.
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<br><br>

<center>

<h3>Some "Primitive" Graphical Tools🛠</h3>

</center>

<br> <br>

::: columns
::: {.column width="50%"}
<center>**R Packages** ![](images/r_logo.png)</center>

<center>

-   [`ggplot2`](https://ggplot2.tidyverse.org/)
-   Base R w/ `plot()` or [`grid`](https://www.stat.auckland.ac.nz/~paul/grid/grid.html)
-   [`r2D3`](https://rstudio.github.io/r2d3/)
-   [`lattice`](http://lattice.r-forge.r-project.org/)

</center>
:::

::: {.column width="50%"}
<center>**Python Libraries** ![](images/python_logo.png)</center>

<center>

-   [`plotnine`](https://plotnine.readthedocs.io/en/stable/)
-   [`pillow` (PIL)](https://pypi.org/project/Pillow/)
-   [`matplotlib`](https://matplotlib.org/)
-   [`turtle`](https://docs.python.org/3/library/turtle.html)

</center>
:::
:::

<br><br>

<center>*If it lets you plot data, it will let you make art...*</center>

::: notes
-   When first starting out, picking a data visualization package or library that you are already familiar with can be helpful.

-   My personal favorite is ggplot2 in R

-   But you can choose whatever language and graphical tool you'd like.

-   The main point is: if a tool lets you plot data, it will let you make art.

-   The challenge come in: when you need to understand how data translates into a visual.

-   Without fail, whenever I do a talk like this, there's always somebody who says...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<br><br>

<center>

::: {#bluequote}
> "I don't understand how you get the data to put into \[ *insert your graphical tool of choice here* \]"
:::

<br><br><br>

![](images/confused.gif){width="50%"}

</center>

::: notes
And I get it. It can be tricky, so let's stop for a minute and Imagine that we want to draw a line on a piece paper, like, in the real world...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<br> <br>

<center>![](images/line_ex.gif){.false}</center>

::: notes
-   If someone is physically able to pick up a pen and use it

-   We might assume it's easy for them to draw a single line on a paper

-   We can make the argument that it might not be a straight line without some guidance though, so maybe we switch to using graph paper instead...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<center>![](images/graph_ex.gif){.false width="60%"}</center>

::: notes
-   Now this may be way easier to people because there's a visual guide now. the grid lines here.

-   But if you stop for a minute and think...where have we probably seen a grid before?

-   Possibly in your favorite visualization tools, for me, it's ggplot2. The grid lines reminds me of the coordinate system all ggplots are created on...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<center>![](images/graph_ex2.gif){.false width="60%"}</center>

::: notes
-   So now using a grid as guidance, in the real world..

-   we can set values to every mark we make on the paper.

-   Just like a coordinate system in your favorite graphical tool would

-   We have 4 coordinate points in this line, each with an x and y value

-   Where we have 4 values from 1 to 4 on the X axis horizontally

-   and a constant value of 1 on the y axis repeated 4 times to make a straight horizontal line.

-   Now this may be simple, but this is essentially all it takes to create generative art.

-   The trick here is that you need to understand the relationship between the visuals you want, and the data you need to make them in regards to a coordinate system.

-   Let's look at this in more detail, without getting into too much detail...because time...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A Simple Example *(In Python)***</u>
:::

::: columns
::: {.column width="55%"}
```{python, echo = TRUE, eval = FALSE}
#===============================================================#
# Library Load-in------------------------------------------------
#===============================================================#
from plotnine import *
import pandas as pd
#===============================================================#
# Image Options--------------------------------------------------
#===============================================================#
#Set the color
orange_hex = "#FFBB58"

#Set the width
chonk = 10
#===============================================================#
# Data Creation--------------------------------------------------
#===============================================================#
line = pd.DataFrame({"x" : list(range(0,5)),
                     "y" : 1,
                     "color" : orange_hex,
                     "size" : chonk})
#===============================================================#
# Plot Creation--------------------------------------------------
#===============================================================#
orange_line = (ggplot(line, aes("x", "y"))+
               geom_path(color = line.loc[:,"color"],
                         size = line.loc[:,"size"])+
               coord_equal(ylim = (0,3), xlim = (0,4)))

#View the plot
print(orange_line)

```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/python_ex1.png){width="100%"}</center>
:::
:::

::: notes
-   There can be different approaches, but here's one way in python.
-   Now without getting too bogged down in the specifics of the code, the process is relatively simple
-   First you load in your libraries you need, then you can do some prep for your data.
-   Here setting values for color and size
-   Most important step -\> create your data sources
-   this is what you'll feed into your graphical tool of choice.
-   pandas dataframe with coordinates (x and y), color, and size
-   feed into plotnine's ggplot fx here.
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A More Complicated Example *(In R)***</u>
:::

::: columns
::: {.column width="55%"}
```{r, echo = TRUE, eval = FALSE}
# Library Load-ins-----------------------------------------------
library(ggplot2); library(dplyr); library(artpack)

# Let's make a basic "cityscape" with a moon 






















# Plot Creation--------------------------------------------------
#Data Goes Here |>
  ggplot(aes(x,y)) +
  theme_void() +
  coord_cartesian(expand = FALSE, xlim = c(0,4), ylim = c(0,3))
 #....
```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/blank_ggplot.png){width="100%"}</center>
:::
:::

::: notes
-   Again, Try not to focus too much on specific code

-   but just observe the general relationship going on here between the data and the visual

This time, start with your libraries..and an idea of what to make - cityscape
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A More Complicated Example *(In R)***</u>
:::

::: columns
::: {.column width="55%"}
```{r, echo = TRUE, eval = FALSE, `code-line-numbers`="1-11,19-20"}
# Data for the sky---------------------
df_sky <- 
  tibble(x = 0,
         xend = 4,
         y = seq(0,3, length = 100),
         yend = y,
         color = art_pals("sunnyside", 100),
         linewidth = 10
  )
# Plot Creation-----------------------
df_sky |>
  ggplot(aes(x,y,
             xend = xend, yend = yend)
  ) +
  theme_void() +
  coord_cartesian(expand = FALSE, 
                  xlim = c(0,4),
                  ylim = c(0,3)) +
  geom_segment(color = df_sky$color,
               linewidth = df_sky$linewidth) 
#...
```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/sky_ggplot.png){width="100%"}</center>
:::
:::

::: notes
-   Want to make a sky in background.
-   I want to use geom_segment, so that requires 2 x points and 2 y points to easily create a line.
-   That choice prompts me to set up a tibble named df_sky, that will translate into a sequence of horizontal lines on the plot with a gradient of colors applied to it from bottom to top.
-   We can see the result of this data frame plotted here.
:::


## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A More Complicated Example *(In R)***</u>
:::

::: columns
::: {.column width="55%"}
```{r, echo = TRUE, eval = FALSE, `code-line-numbers`="1-8,23-29"}
# Data for the moon----------------------------------------------
df_moon <- tibble(
  x = 2,
  y = 1.5,
  size = 100,
  fill = "#f0e4bb",
  color = "#000000"
)

# Plot Creation--------------------------------------------------
df_sky |>
  ggplot(aes(x,y, xend = xend, yend = yend,)) +
  theme_void() +
  coord_cartesian(expand = FALSE, xlim = c(0,4), ylim = c(0,3)) +
  geom_segment(color = df_sky$color,
               linewidth = df_sky$linewidth) +
  geom_point(data = df_moon, aes(x,y),
             color = df_moon$color,
             fill = df_moon$fill,
             size = df_moon$size,
             shape = 21,
             stroke = .5,
             inherit.aes = FALSE) 


#...
```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/moon_ggplot.png){width="100%"}</center>
:::
:::

::: notes
-   Next, let's say we want to have a simple, big moon.
-   We can do this easily by creating data for a single point, setting a big value for it's size and color options
-   while making sure to tweak the geom_point function in the plot with the shape and stroke arguments in the ggplot functions down here...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A More Complicated Example *(In R)***</u>
:::

::: columns
::: {.column width="55%"}
```{r, echo = TRUE, eval = FALSE, `code-line-numbers`="1-8,31-32"}
# Data for the buildings-----------------------------------------
df_buildings <- tibble(
  x = 0:4,
  xend = x, 
  y = 0,
  yend = sample(seq(.5,2, l = 10), 5, replace = TRUE),
  color = "#000000",linewidth = 60
)


# Plot Creation--------------------------------------------------
df_sky |>
  ggplot(aes(x,y, xend = xend, yend = yend)) +
  theme_void() +
  coord_cartesian(expand = FALSE, xlim = c(0,4), ylim = c(0,3)) +
  geom_segment(color = df_sky$color,
               linewidth = df_sky$linewidth) +
  geom_point(data = df_stars, aes(x,y),
             alpha = df_stars$alpha,
             color = df_stars$color,
             size = df_stars$size,
             position = position_jitter(width = .1, height = .1),
             inherit.aes = FALSE) +
  geom_point(data = df_moon, aes(x,y),
             color = df_moon$color,
             fill = df_moon$fill,
             size = df_moon$size,
             shape = 21,
             stroke = .5,
             inherit.aes = FALSE) +
  geom_segment(data = df_buildings, color = df_buildings$color,
               linewidth = df_buildings$linewidth)

```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/buildings_ggplot.png){width="100%"}</center>
:::
:::

::: notes
-   Finally, we can decide to use geom_segment again and create thick vertical chunks of lines this time that makes a basic silhouette of some buildings.
-   Done again by storing this in a tibble called df_buildings and using geom_segment here... This may have been alot to see, but the main point is that...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<br> <br>

<center>

::: {#bluequote}
> The concept of translating data into visuals is the same no matter how simple or complex a piece is...
:::

<br> <br>

::: {#bluequote}
> The **hard** part is usually the programming or the math🤢
:::

</center>

::: notes
So now that everyone is up to speed about what generative art is, and you have some idea of how it can be made, let's talk about the benefits of making art like this
:::

##  {background-color="#1a1a1a" background-image="images/background4.png" background-size="cover"}

<br> <br> <br> <br> <br> <br>

<center>

<h1>Benefits of Creating<br>Generative Art</h1>

</center>

::: notes
-   Theres lots of benefits to making art like this.
-   One of the biggest and obvious is just "learning" in general. And it got me to thinking about something...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: columns
::: {.column width="50%"}
<center>![](images/idea.gif){.false width="100%"}</center>
:::

::: {.column width="50%"}
<br><br>

<center>

::: {#turqquote}
> People may learn better when they are doing something they enjoy 🤯
:::

</center>

<br><br>

<center>

::: fragment
::: {#turqquote}
> If you enjoy creating art...you might learn some things 🤔
:::
:::

</center>
:::
:::

::: notes
-   I have an idea that.. {first} -\> next click -\>

{after} - I'm not trying to be funny, I can't just stand up here and say this is a proven fact. I'm not an expert in determining how people learn efficiently...but the best I can do is give you personal examples of my experience with creating generative art...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
### The Obvious 🎨

-   Improved Data Visualization Skills

<center>![](images/first_tt){width="80%"}</center>
:::

::: notes
An example I love to use for this are my tidy Tuesday submissions.. you know, that weekly data viz challenge we have? Used to be super popular on Twitter before it became a hellsite.. This was my first submission...and you couldn't tell me NOTHING. I felt so proud of this. And honestly, I had every reason to be. Making this was a great accomplishment at the time because I taught myself how to do it.
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
### The Obvious 🎨

-   Improved Data Visualization Skills

<center>![](images/mid_tt){width="45%"}</center>
:::

::: notes
This was my work after about 2 months of creating generative art...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
### The Obvious 🎨

-   Improved Data Visualization Skills

<center>![](images/last_tt){width="75%"}</center>
:::

::: notes
And my most recent tidy tuesday I did this year... obviously, i deveolped knowledge of how to make things more aesthetically pleasing, and how to hack my tool of choice for some coll results.
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
### The Abstract 🧠

-   Mathematical/Logical Reasoning

<center>![](images/logic_ex1.png)</center>
:::

::: notes
Now for some more abstract examples...

Imagine how PISSED I was when I found out math was involved to make art..

Art can require you to be knowledgeable about patterns, numeric sequences, and general logic..

logical reasoning is what makes it possible to go from a grid of points like this...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
### The Abstract 🧠

-   Mathematical/Logical Reasoning

<center>![](images/logic_ex2.png)</center>
:::

::: notes
To a grid with skipped patterns like this...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
### The Abstract 🧠

-   Mathematical/Logical Reasoning

<center>![](images/logic_ex3.png)</center>
:::

::: notes
To a finished piece of art like this, without having to manually create the data for every single pixel shown here.
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
### The Abstract 🧠

-   Functional Programming

```{r, echo = TRUE, eval = FALSE}
# Custom FX from the Functions in Rtistry Workshop -
# Found Here: https://thetidytrekker.com/talks/functions_in_rtistry/functions_for_rtistry

circle_randomizer(
  color_pal = "random",
  border_color = "random",
  crowding = "random",
  coordinates = "random"
  )
```

::: columns
::: {.column width="33%"}
![](images/fx_ex2.png)
:::

::: {.column width="33%"}
<br><br>

![](images/fx_ex1.png)
:::

::: {.column width="33%"}
![](images/fx_ex3.png)
:::
:::
:::

::: notes
Wanting to create more complicated art is natural the longer you do it. You start to realize how helpful it is to learn more about programming in general. Art is why I created my first function ever in R.
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
### The Unexpected 😲

-   The [#genartclub](https://twitter.com/search?q=%23genartclub&src=typed_query) and [#rtistry](https://fosstodon.org/search) community

<center>![](images/tweet_ex.png){width="50%"}</center>
:::

::: notes
Gave me another reason to interact with people and share what I was doing...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
<h3>The Unexpected 😲</h3>

-   Package Development - [{artpack}](https://meghansaha.github.io/artpack/)
:::

::: columns
::: {.column width="50%"}
<center>![](images/artpack.png){.false width="100%"}</center>
:::

::: {.column width="50%"}
<br><br><br>

-   My first ever package!
-   *Data-centric* Rtistry Toolkit
-   Early development, but things are coming
-   Now available on [CRAN](https://cloud.r-project.org/web/packages/artpack/index.html) 🎉
:::
:::

::: notes
Yes, I made a package - Huge accomplishment for me!
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
<h3>The Unexpected 😲</h3>

-   Art Store - ["Tidy Treks"](https://www.etsy.com/shop/TidyTreks)
:::

::: columns
::: {.column width="50%"}
<center>![](images/tidytreks.png){width="100%"}</center>
:::

::: {.column width="50%"}
<center>

![](images/artex.png){.false width="70%"}

A few fancy canvases, posters, and novelties - all created with R

</center>
:::
:::

::: notes
Yes, I finally got over some anxiety and made a store!
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
<h3>The Unexpected 😲</h3>

-   Rtistry Textbook?! - "Rtistry: Methods For Visual Generative Art Using R"
:::

::: columns
::: {.column width="50%"}
<center>![](images/book_snip.png){width="100%"}</center>
:::

::: {.column width="50%"}
<br><br><br>

-   Yes!!
-   Co-authored with [Antonio Páez](https://fosstodon.org/@paezha@mastodon.online), [Antonio Chinchón](https://twitter.com/aschinchon), and [Jacquie Tran](https://fosstodon.org/@jacquietran@mastodon.social)
-   First open-sourced textbook dedicated to teaching readers how to create generative art in R
:::
:::

::: notes
Yes, I made a package - Huge accomplishment for me!
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
<h3>The Most Important ❤️</h3>

-   It's therapeutic, fun, and (mostly) low-stress

<center>![](images/heart.png){width="50%"}</center>
:::

::: notes
I owe alot to generative art, the tidyverse, and the R community. My life has changed and been enriched some much because of R and the tidyverse, and now because of this art as well.
:::

##  {background-color="#1a1a1a" background-image="images/background5.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br>

<center>

<h1>What is Data Science?</h1>

</center>

## What is Data Science? {.green background-color="#657750"}

<br>

In this room today, Data Science is defined as...

::: {#greenquote}
> An interdisciplinary field that uses statistics, scientific computing, scientific methods, processes, algorithms and systems [*to extract or extrapolate knowledge and insights from data*]{style="color:#CCD2BC"}.
:::

<br><br><br>

::: fragment
<center>

<h3>*We'll focus on the technical methods and processes (coding) for the remainder of this talk...*</h3>

</center>
:::

##  {background-color="#1a1a1a" background-image="images/background6.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br> <br> <br>

<center>

<h1>Examples of How Generative Art Translates into Data Science</h1>

</center>

## Examples of How Generative Art Translates into Data Science {.yellow background-color="#C8B17E"}

::: {style="padding-bottom: 20px; padding-top: 20px;"}
<h3>Iteration♻️</h3>
:::

<br>

::: columns
::: {.column width="50%"}
-   Mastering this in Art and Data Science can be a **HUGE feat**

<br>

-   Important concept in both art and Data Science.

<br>

-   A lot of use-cases and scenarios exist in both realms, where we want to do the same thing over and over.
:::

::: {.column width="50%"}
<center>![](images/iterations.gif)</center>
:::
:::

::: notes
-   It's so important, it even has it's own chapter in the R4DS book

-   It doesn't matter how you do iteration

-   Whether you use base control flows like for-loops, whiles, and repeats, or you've fully adopted tidyverse's purrr ecosystem

-   We can't deny that iteration really tends to take people into the next level of skill, because it allows you to do so much with less.

-   If you're not at a point in your journey where you feel comfortable with performing iterations, trying to do iterations for a different purpose might help with any mental blocks you might have.
:::

## Examples of How Generative Art Translates into Data Science - Iteration♻️ {.yellow background-color="#C8B17E"}

<br>

::: columns
::: {.column width="50%"}
<center><u>**Gen Art Scenario**</u></center>

<br>

**End Goal:**

-   Want to create a lot of copies of a shape where each shape has a different color and a different position on the coordinate system

<center>![](images/maximalism.png){height="40%"}</center>
:::

::: {.column width="50%"}
<center><u>**Data Sci Scenario**</u></center>

<br>

**End Goal:**

-   Want to skim, label, and save multiple processed data sets all at once

<br>

<center>![](images/ex1_flow.png)</center>
:::
:::

::: notes
On Maternity leave - Did a daily gen art challenge called Genuary. - The prompt on Jan 29th was Maximalism - Wanted these finger-like things coming from the top and bottom of the page, lots of them. <br> Likewise, back at work - A lot of imaging data to reconcile from vendors all at once. - Wanted to make cleaner/smoother workflow as the amount of vendors can change - Hard coding would get the job done, but make things hard in the long run.
:::

## Examples of How Generative Art Translates into Data Science - Iteration♻️ {.yellow background-color="#C8B17E"}

<br>

::: columns
::: {.column width="50%"}
<center><u>**Gen Art Scenario**</u></center>

<br>

**Approach:**

-   Isolate the problem.... how tf do we make a finger-like shape in the first place??

<br>

<center>![](images/ex1_isolate_art.png)</center>
:::

::: {.column width="50%"}
<center><u>**Data Sci Scenario**</u></center>

<br>

**Approach:**

-   Isolate the problem.... How can I do this workflow for just one of the data sets without the console throwing errors?? <br>

<center>![](images/ex1_isolate_ds.png)</center>
:::
:::

::: notes
In art: - the first challenge is creating the data - keep trying until the plot shows what you're going for <br> In Data Science: - You already have the data.. - But nuances may need to be addressed - Isolate the problem by doing what you want for at least one data frame - Keep debugging until the final output is correct and operating as intended
:::

## Examples of How Generative Art Translates into Data Science - Iteration♻️ {.yellow background-color="#C8B17E"}

<br>

::: columns
::: {.column width="50%"}
<center><u>**Gen Art Scenario**</u></center>

<br>

**Iterating in Action:**

-   Use your preferred method of iteration to create a generalized workflow.

```{r, echo = TRUE, eval = FALSE}
#finger options for iterations#
drip_opts <- list(
  1:n,
  y_starts,
  x_starts,
  fills_colors
)
#Finger data from the top-down#
drip <- pmap(drip_opts, ~tibble(
  x = c(..3, *math for x-axis goes here*),
  y = c(..2, *math for y-axis goes here*),
  group = group_numbers(..1),
  fill = c(..4)
)) |>
  list_rbind()
```
:::

::: {.column width="50%"}
<center><u>**Data Sci Scenario**</u></center>

<br>

**Iterating in Action:**

-   Use your preferred method of iteration to create a generalized workflow.

```{r, echo = TRUE, eval = FALSE}
# Different DFs for iterations
lst_vendors <- 
  list("Vender 1" = df_1,
       "Vendor 2" = df_2
  )
# Apply labels to all DFs
lst_labelled <- 
  imap(lst_vendors, ~set_derived_variable_labels(
         .x,.y, path = here("some_local_path_of_variables.csv")
         ))
# Skim all the DFs
map(lst_labelled, ~ skimr::skim(.x)
)
#saving master analytic data set
map(lst_labelled,
    ~saveRDS(.x,
             file = glue("{names(lst_labelled[.x])}.RDS")
    ))
```
:::
:::

::: notes
In art: - the first challenge is creating the data <br> In Data Science: - You already have the data.. - But nuances may need to be addressed - Isolate the problem by doing what you want for at least one data frame
:::

## Examples of How Generative Art Translates into Data Science {.yellow background-color="#C8B17E"}

::: {style="padding-bottom: 20px; padding-top: 20px;"}
<h3>Development 📦</h3>
:::

<br>

::: columns
::: {.column width="50%"}
-   Learning and honing in on development skills is another **HUGE** feat <br><br>
-   In the art realm, this promotes cleaner and robust workflows and more complex operations <br><br>
-   In Data Science, it does the same, but you're *really* moving up to new levels✨.
:::

::: {.column width="50%"}
<center>![](images/new_level.gif)</center>
:::
:::

::: notes
-   For art, can really start to set your stuff apart from beginner/simpler things <br>
-   For DS, branching into development is HIGHLY desirable.
-   Allows you to take more advantage of the "open-source" paradigm by creating programs for your organization and others in the community.
:::

## Examples of How Generative Art Translates into Data Science - Development 📦 {.yellow background-color="#C8B17E"}

<br>

::: columns
::: {.column width="50%"}
<center><u>**Gen Art Scenario**</u></center>

<br>

**End Goal:**

-   Want to create a function that spits out a color palette of a specified length based on preset choices.

<center>![](images/ex2_art.png)</center>
:::

::: {.column width="50%"}
<center><u>**Data Sci Scenario**</u></center>

<br>

**End Goal:**

-   Want to create a function that left joins a table of existing data to another data frame.

<br>

<center>![](images/ex2_ds.png)</center>
:::
:::

::: notes
-   Whether you are in R or python, this purpose of creating functions are generally the same
-   We wish to do a specific task, in an isolate environment for a consisent output or result.
:::

## Examples of How Generative Art Translates into Data Science - Development 📦 {.yellow background-color="#C8B17E"}

<br>

::: columns
::: {.column width="50%"}
<center><u>**Gen Art Scenario**</u></center>

<br>

**Approach:**

-   Isolate: How do we handle the input, code for the work in the function's body, and return the intended output/side effect to us?

```{r, eval = FALSE, echo = TRUE}
art_pals <- function(colors = "pal_1", n = 5) {
  
  # Preset Pals
  pal = switch(colors, 
               "pal_1" = c("#000000", "#ffffff", "#1a1a1a"),
               "pal_2" = c("#1a2242", "#ea2242", "#9ad742")
  )
  
  # Creating pal with specified n
  final_pal = colorRampPalette(pal)(n)
  
  # Return final pal
  return(final_pal)
}
```
:::

::: {.column width="50%"}
<center><u>**Data Sci Scenario**</u></center>

<br>

**Approach:**

-   Isolate: How do we handle the input, code for the work in the function's body, and return the intended output/side effect to us?

```{r, eval = FALSE, echo = TRUE}
map_ae <- function(data = df_main, join_col = ae_term) {
  
  # Preset data frame gets pulled in
  df_ae <- load(*df_ae path here*)
  
  # Creating new df with left_join
  final_df <- df_main |>
    left_join(df_ae, by = "ae_term")
  
  # Return final df
  return(final_df)
}
```
:::
:::

::: notes
-   Whether it's for art or data science, the approach is the same
-   Work has to be done to get from input to output
-   This can also open a can of worms to unit testing and pkg dev.
:::

## Examples of How Generative Art Translates into Data Science - Development 📦 {.yellow background-color="#C8B17E"}

<br>

::: columns
::: {.column width="50%"}
<center><u>**Gen Art Scenario**</u></center>

<br>

**Development in Action:**

-   Now we can just use our function and do the work in one line.

```{r, eval = FALSE, echo = TRUE}
art_pals("pal_2",50)

*Returns 50 calculated colors based on the input `pal_2`*
```
:::

::: {.column width="50%"}
<center><u>**Data Sci Scenario**</u></center>

<br>

**Development in Action:**

-   Now we can just use our function and do the work in one line.

```{r, eval = FALSE, echo = TRUE}
map_ae(df_main, ae_term)

*Returns a joined data frame*
*with data from `df_main` and `df_ae`*
```
:::
:::

::: notes
-   Whether art or DS, the end goal of reducing code bloat is the same.
-   Especially helpful for larger processes where a single purrr function or for loop won't cut it.
-   Know this is just a taste, this obviously led down a rabbit hole of being able to create my own art package, and help to enhance and maintain existing packages at work
-   Creating functions is the tip of the iceberg and will lead you into a slippery slope of other crucial things I don't have time to talk about like unit testing and package maintenance.
:::

## Examples of How Generative Art Translates into Data Science {.yellow background-color="#C8B17E"}

::: {style="padding-bottom: 20px; padding-top: 20px;"}
<h3>Communication 💬</h3>
:::

<br>

::: columns
::: {.column width="50%"}
-   It's **debatable** if you *need* communication for art<br><br>
-   Explaining art methods, and collaborating on issues requires communication <br><br>
-   In Data Science, you **NEED to communicate *or else*** 💀
:::

::: {.column width="50%"}
<center>![](images/confused.png){width="80%"}</center>
:::
:::

::: notes
-   For art, you don't need to communicate really...but it can help you get better if you do.
-   This may come naturally if you're trying to figure something out and can't - POSIT community boards, SO, Google Searching, etc.
-   Data Science, communication is non-negotiable. YOU MUST DO THIS.
:::

## Examples of How Generative Art Translates into Data Science - Communication 💬 {.yellow background-color="#C8B17E"}

<br>

::: columns
::: {.column width="50%"}
<center><u>**Gen Art Scenario**</u></center>

<br>

**End Goal:**

-   Need to ask people for help with developing unit test suites for art functions...but they don't understand what I'm trying to do with the function or test for...

<center>![](images/comms_ex_art.gif)</center>
:::

::: {.column width="50%"}
<center><u>**Data Sci Scenario**</u></center>

<br>

**End Goal:**

-   Need to perform a data request for a stakeholder, but the stakeholder isn't intimately familiar with the data structure and can't help me with that...

<center>![](images/comms_ex_ds.gif)</center>
:::
:::

::: notes
-   The scenarios are flipped. In the art scenario, I am the SME, In the Data Science Scenario, I am not the SME, and the SME doesn't know wth I need
-   Requires communicating in different ways, but both with the need to get everyone involved on the same page.
:::

## Examples of How Generative Art Translates into Data Science - Communication 💬 {.yellow background-color="#C8B17E"}

<br>

::: columns
::: {.column width="50%"}
<center><u>**Gen Art Scenario**</u></center>

<br>

**Approach:**

-   Identify what I am functionally trying to do without the context of the art, then create a proper reprex or explain the desired result plainly to someone smarter than me.
:::

::: {.column width="50%"}
<center><u>**Data Sci Scenario**</u></center>

<br>

**Approach:**

-   Identify what context or details I am missing OR explain what the current process is so someone smarter than me can assist me.
:::
:::

<center>![](images/comms_approach.gif)</center>

::: notes
-   The scenarios are flipped. In the art scenario, I am the SME, In the Data Science Scenario, I am not the SME, and the SME doesn't know wth I need
-   Requires communicating in different ways, but both with the need to get everyone involved on the same page.
:::

## Examples of How Generative Art Translates into Data Science - Communication 💬 {.yellow background-color="#C8B17E"}

<br>

::: columns
::: {.column width="50%"}
<center><u>**Gen Art Scenario**</u></center>

<br>

**Communicating in Action:**

-   Create a reprex with the [`reprex` package](https://reprex.tidyverse.org/) (R) or the [`reprexpy` library](https://reprexpy.readthedocs.io/en/latest/) (Python) and only give art "context" when needed. Most issues are a programming/logic one, or a math one that has nothing to do with "art" 😖

<br>

```{r echo = FALSE, eval = TRUE, include = TRUE}
  is.color <- function(...) {
    # is the input a base R color?
    r_color <-
      sapply(
        ...,
        function(x) x %in% colors()
      )
    # is the input a valid hex color code?
    hex_color <-
      sapply(
        ...,
        function(x) grepl("^#[A-Fa-f0-9]{6}", tolower(x))
      )
    out <- r_color + hex_color
    output <- ifelse(out > 0, TRUE, FALSE)
    return(output)
  } 

```

```{r echo = TRUE, eval = TRUE}
# Some function that I can't get to work as expected----
reprex::reprex(
  {
  # UPPERCASES don't work
  is.color("BLUE")
  # lowercases do
  is.color("blue")
  }
)
```
:::

::: {.column width="50%"}
<center><u>**Data Sci Scenario**</u></center>

<br>

**Communicating in Action:**

-   Translate what you are doing in R or Python to the Subject Matter Expert. Explain the uncertainties, ask clarifying questions about the subject matter and explain where gaps are.

<center>![](images/no_tech.png){width="45%"}</center>
:::
:::

::: notes
-   with art, your head may not be thinking "functionally" - youre wrapped up in getting the final result w/o thinking about what you are actually trying to do in R
-   with DS, you may be taksed with communicating with
:::

##  {background-color="#1a1a1a" background-image="images/background7.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br> <br> <br>

<center>

<h1>Final Thoughts</h1>

</center>

## Final Thoughts {.orange background-color="#C88A5B"}

<br><br>

<center>

::: {#orangequote}
> This was a tiny introduction into the concept of one type of generative art
:::

::: {#orangequote .fragment}
> This was personal: Generative Art was MY motivation to learn and do more
:::

::: {#orangequote .fragment}
> Doing something I loved made programming/data science digestible
:::

</center>

##  {background-image="images/background.png" background-size="cover"}

##  {background-color="#1a1a1a"}

<center>![](images/heart_end.png){.false}</center>
