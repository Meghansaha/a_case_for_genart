---
title: "It's All About Perspective"
subtitle: "Making A Case for Generative Art"
author: "Meghan Harris, MPH"
institute: "Posit::conf(2023)"
date: "09-20-2023"
date-format: "MMMM Do, YYYY | YYYY-MM-DD"
format:
  revealjs: 
    slide-number: true
    width: 1690
    height: 1080
    margin: .2
    editor: source
    linkcolor: "#ffffff"
    highlight-style: github
    code-copy: true
    code-overflow: scroll
    code-block-bg: true
    transition: fade
css: "scripts/style.css"
title-slide-attributes: 
  data-background-image: "images/background.png"
  data-background-size: "stretch"
  data-background-position: "center"
  data-background-color: "#1a1a1a"
  data-notes: "Hello, Im Meghan Harris, I'm a data scientist at the Prostate Cancer Clinical Trials Consortium, and I'm also a generative artist that's here to introduce you all to generative art and give a glimpse into a different approach to learning data science. Before I do that, I have to say, I feel like I'm only talking here today because I stopped working 10 months ago. Let me explain. I didn't go off the deep end and quit my job or anything, but as you can see here..."
transition: fade
---

##  {background-color="#1a1a1a" background-image="images/intro_back.png" background-size="cover"}

<center>

![A snapchat picture of me showing my baby bump at 37 weeks](images/whale_bump.jpg){width="700"}

</center>

::: notes
-   I was very pregnant and ready to pop.

-   I gave birth to a beautiful baby.

-   Went on maternity leave for 6 months and I know it sounds fake, but...
:::

##  {background-color="#1a1a1a" background-image="images/intro_back.png" background-size="cover"}

<center>

![A shot of me coding in R Studio while watching a baby monitor](images/unreal.jpg){width="1000"}

</center>

::: notes
-   I actually found time to code on leave.

-   But I had a rule for myself

-   to only code if it was for fun stuff like art...
:::

##  {background-color="#1a1a1a" background-image="images/intro_back.png" background-size="cover"}

<center>

![Some artwork I made on maternity leave](images/roundup.png){.false width="1300"}

</center>

::: notes
-   By the end of my leave

-   I was amazed at how coding art like this

-   helped with practical data science skills I needed when I returned to work

-   I credit this for smoothing out my transition back into work and I want to give a tiny glimpse into how that was possible
:::

##  {background-color="#1a1a1a" background-image="images/background1.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br> <br> <br>

<center>

<h1>Disclaimer</h1>

</center>

::: notes
-   I want to give a disclaimer
-   it's OK if you don't know how to make generative art.
-   It's OK if you don't even like art.
-   It's OK if you don't know much about data science.
-   My hope is that you treat this talk like a "choose-your-own-adventure".
-   Just like those old goosebumps books...
-   I'm not the only old person in here who remembers those right?
-   They kinda looked like this...
:::

##  {background-color="#7a2929"}

::: columns
::: {.column width="50%"}
![](images/ga1.png)
:::

::: {.column width="50%"}
![](images/ga2.png)
:::

[ @KazeKomboArt]{style="float:right"}
:::

::: notes
So whether you're here for the art {pause}
:::

##  {background-color="#7a2929"}

::: columns
::: {.column width="50%"}
![](images/ds1.png)
:::

::: {.column width="50%"}
![](images/ds2.png)
:::
:::

[ @KazeKomboArt]{style="float:right"}

::: notes
or the data science... {pause}
:::

##  {background-color="#7a2929"}

<center>![](images/learn1.png){width="50%"}</center>

[ @KazeKomboArt]{style="float:right"}

::: notes
...or just learning, {pause}

-   I'm hoping there will be something for you to take away from this today.

-   Aren't these pictures awesome?! - My awesome husband made these characters for me!

- I love them

-   So let's get started....
:::

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map1.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

</div>

::: notes
So, a quick run-down of our time today...
:::

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map2.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

-   <h3>How Can we Make Generative Art in R or Python?</h3>

</div>

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map3.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

-   <h3>How Can we Make Generative Art in R or Python?</h3>

-   <h3>Benefits of Creating Generative Art</h3>

</div>

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map4.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

-   <h3>How Can we Make Generative Art in R or Python?</h3>

-   <h3>Benefits of Creating Generative Art</h3>

-   <h3>What is Data Science?</h3>

</div>

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map5.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

-   <h3>How Can we Make Generative Art in R or Python?</h3>

-   <h3>Benefits of Creating Generative Art</h3>

-   <h3>What is Data Science?</h3>

-   <h3>Examples of How Generative Art Translates into Data Science</h3>

</div>

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map6.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

-   <h3>How Can we Make Generative Art in R or Python?</h3>

-   <h3>Benefits of Creating Generative Art</h3>

-   <h3>What is Data Science?</h3>

-   <h3>Examples of How Generative Art Translates into Data Science</h3>

-   <h3>Final Thoughts</h3>

</div>

##  {background-color="#1a1a1a" background-image="images/background2.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br> <br> <br>

<center>

<h1>What is Generative Art?</h1>

</center>

::: notes
So I want to pose a question to you all, you don't have to answer me out loud, but just think for a second, what do ***you*** think generative art is?

-   Is it opening up a digital sketchpad and physically drawing on a screen?
-   Or creating outputs from AI art platforms like Dall-E or Lensa?

I couldn't find an official definition for you all, so I'm making one right here, right now.
:::

## What is Generative Art? {.purple background-color="#6c4161"}

<br> <br>

In this room today, Generative Art is defined as:

<br> <br>

> **Artwork created through a program in any language or interface.**

<br><br>

::: {.fragment}
> <center>**As long as a program executes the generation of the art...<br>...it can be considered generative art.**</center>
:::

::: notes
Now this is vague and general, and yes. that's on Purpose<br>

-   Because I can guarantee you, that there are multiple definitions of generative art floating around in your minds, collectively in this room right now.

-   Also, assumption: At least 1 person in here is thinking of AI art.

-   And I want to address this.. We are not talking about AI art today

-   and, In fact, I want to make two statements regarding AI art and automation...
:::

## What is Generative Art? {.purple background-color="#6c4161"}

<br><br>

<center>

> While all AI Art is generative art... <br>

::: fragment
> ...All generative art **IS NOT** AI art
:::

<br>

::: fragment
&

<br>

> While some generative art is randomly calculated by the computer... <br>
:::

::: fragment
> ...Some generative art is intentional and deliberately calculated by a human
:::

</center>

::: notes
What do I mean by that?<br>
Hopefully I can show you when we talk about<br>
How we can make it in R or Python<br>
:::

##  {background-color="#1a1a1a" background-image="images/background3.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br> <br> <br>

<center>

<h1>How Can we Make Generative Art<br>in R or Python?</h1>

</center>

::: notes
-   Safe to say we have some "data" people in here and that some of you have probably created data visualizations with R or Python.
-   Iff you know how to make visuals in R or Python, you're already so clost to making generative art...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<br> <br> <br>

<center>

::: {#bluequote}
> Making generative art might not be as hard as you think...
>
> You just need ✨data✨ and to
>
> [Think outside the grid](https://thetidytrekker.com/post/thinking-outside-the-grid/thinking-outside-the-grid.html) 📊 of your favorite graphical software/package
:::

</center>

::: notes
Now...

-   I'm going to be real with ya'll, I don't have enough time here to truly explain in depth how to make complicated art with code

-   I mean, Posit, Jenny, Hadley, ya'll got my e-mail, I can help with the art workshop next year if ya'll want, I'm just saying, but for right now

-   All of the code examples for the art you'll see today is on this talk's github repo

-   so you all can listen to me attempt to give a crash course right now,

-   but after the dust is settled and you're back home, know that these resources are available to you to digest later.

- Because we are about to Zoom
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<br><br>

<center>

<h3>Some "Primitive" Graphical Tools🛠</h3>

</center>

<br> <br>

::: columns
::: {.column width="50%"}
<center>**R Packages** ![](images/r_logo.png)</center>

<center>

-   [`ggplot2`](https://ggplot2.tidyverse.org/)
-   Base R w/ `plot()` or [`grid`](https://www.stat.auckland.ac.nz/~paul/grid/grid.html)
-   [`r2D3`](https://rstudio.github.io/r2d3/)
-   [`lattice`](http://lattice.r-forge.r-project.org/)

</center>
:::

::: {.column width="50%"}
<center>**Python Libraries** ![](images/python_logo.png)</center>

<center>

-   [`plotnine`](https://plotnine.readthedocs.io/en/stable/)
-   [`pillow` (PIL)](https://pypi.org/project/Pillow/)
-   [`matplotlib`](https://matplotlib.org/)
-   [`turtle`](https://docs.python.org/3/library/turtle.html)

</center>
:::
:::

<br><br>

<center>*If it lets you plot data, it will let you make art...*</center>

::: notes
-   When first creating art

- It's helpful: picking a data visualization tool that you're comfortable with

-   For me, that's ggplot2 in R

-   But you can choose whatever language and graphical tool you'd like.

-   The main point is: if a tool lets you plot data, it will let you make art.

-   The challenge comes in: when you need to understand how data translates into a visual.

-   Without fail, whenever I do a talk like this, there's always somebody who says...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<br><br>

<center>

::: {#bluequote}

> "I don't understand how you get the data to put into \[ *insert your graphical tool of choice here* \]"

:::

<br><br><br>

![](images/confused.gif){width="50%"}

</center>

::: notes
And I get it. It can be tricky, so let's stop for a minute and Imagine that we want to draw a line on a piece paper, like, in the real world...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<br> <br>

<center>![](images/line_ex.gif){.false}</center>

::: notes
-   If someone is physically able to pick up a pen and use it

-   We might assume it's easy for them to draw a single line on a paper

-   We can argue that maybe a perfectly straight line might be hard right?...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<center>![](images/graph_ex.gif){.false width="60%"}</center>

::: notes
-   So let's use graph paper instead
-   Now this may be way easier for people b/c we have a visual guide of grid lines,
-   But if you stop and think...where have we probably seen a grid like this before?
-   Possibly in your favorite visualization tools
-   for me, it's ggplot2.
-   The grid lines reminds me of the coordinate system all ggplots are created on...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<center>![](images/graph_ex2.gif){.false width="60%"}</center>

::: notes
-   So knowing this..

-   we can set values to every mark we make on the paper...

-   Just like a coordinate system in your favorite graphical tool would.

-   We have 4 coordinate points in this line, each with an x and y value

-   Where we have 4 values from 1 to 4 on the X axis horizontally

-   and a constant value of 1 on the y axis repeated 4 times to make a straight horizontal line.

-   Now this may seem overly simple, but this is all it takes to create generative art.

-   The trick here is that you need to understand the relationship between the visuals you want, the data you need and the coordinate system you set.

-   Let's look at this in more detail in Python..
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A Simple Example *(In Python)***</u>
:::

::: columns
::: {.column width="55%"}
```{python, echo = TRUE, eval = FALSE, `code-line-numbers`="2-4"}
#====================================================#
# Library Load-in-------------------------------------
from plotnine import *
import pandas as pd

# Image Options---------------------------------------
#Set the color
orange_hex = "#FFBB58"

#Set the width
chonk = 10

# Data Creation----------------------------------------
line = pd.DataFrame({"x" : list(range(0,5)),
                     "y" : 1,
                     "color" : orange_hex,
                     "size" : chonk})

# Plot Creation----------------------------------------
orange_line = (ggplot(line, aes("x", "y"))+
               geom_path(color = line.loc[:,"color"],
                         size = line.loc[:,"size"])+
               coord_equal(ylim = (0,3), xlim = (0,4)))

#View the plot
print(orange_line)
```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/python_ex1.png){width="100%"}</center>
:::
:::

::: notes
-   There can be different approaches to our last example, but here's one way in python.
-   Now don't get too bogged down in the specifics of the code,
-   We just want to focus on the process here
-   First you load in your libraries you need
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A Simple Example *(In Python)***</u>
:::

::: columns
::: {.column width="55%"}
```{python, echo = TRUE, eval = FALSE, `code-line-numbers`="6-11"}
#====================================================#
# Library Load-in-------------------------------------
from plotnine import *
import pandas as pd

# Image Options---------------------------------------
#Set the color
orange_hex = "#FFBB58"

#Set the width
chonk = 10

# Data Creation----------------------------------------
line = pd.DataFrame({"x" : list(range(0,5)),
                     "y" : 1,
                     "color" : orange_hex,
                     "size" : chonk})

# Plot Creation----------------------------------------
orange_line = (ggplot(line, aes("x", "y"))+
               geom_path(color = line.loc[:,"color"],
                         size = line.loc[:,"size"])+
               coord_equal(ylim = (0,3), xlim = (0,4)))

#View the plot
print(orange_line)
```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/python_ex1.png){width="100%"}</center>
:::
:::

::: notes
-   then you can do some prep for your data.
-   Here storing values in objects for the color and size of our line
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A Simple Example *(In Python)***</u>
:::

::: columns
::: {.column width="55%"}
```{python, echo = TRUE, eval = FALSE, `code-line-numbers`="13-17"}
#====================================================#
# Library Load-in-------------------------------------
from plotnine import *
import pandas as pd

# Image Options---------------------------------------
#Set the color
orange_hex = "#FFBB58"

#Set the width
chonk = 10

# Data Creation----------------------------------------
line = pd.DataFrame({"x" : list(range(0,5)),
                     "y" : 1,
                     "color" : orange_hex,
                     "size" : chonk})

# Plot Creation----------------------------------------
orange_line = (ggplot(line, aes("x", "y"))+
               geom_path(color = line.loc[:,"color"],
                         size = line.loc[:,"size"])+
               coord_equal(ylim = (0,3), xlim = (0,4)))

#View the plot
print(orange_line)
```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/python_ex1.png){width="100%"}</center>
:::
:::

::: notes
-   Next, the Most important step is creating the data frame
-   here its a pandas dataframe with x and y coordinates, and values for our color, and size of our line

:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A Simple Example *(In Python)***</u>
:::

::: columns
::: {.column width="55%"}
```{python, echo = TRUE, eval = FALSE, `code-line-numbers`="19-26"}
#====================================================#
# Library Load-in-------------------------------------
from plotnine import *
import pandas as pd

# Image Options---------------------------------------
#Set the color
orange_hex = "#FFBB58"

#Set the width
chonk = 10

# Data Creation----------------------------------------
line = pd.DataFrame({"x" : list(range(0,5)),
                     "y" : 1,
                     "color" : orange_hex,
                     "size" : chonk})

# Plot Creation----------------------------------------
orange_line = (ggplot(line, aes("x", "y"))+
               geom_path(color = line.loc[:,"color"],
                         size = line.loc[:,"size"])+
               coord_equal(ylim = (0,3), xlim = (0,4)))

#View the plot
print(orange_line)
```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/python_ex1.png){width="100%"}</center>
:::
:::

::: notes
-   this is what you'll feed into the set ggplot fxs at the bottom to create the plot
-   And after we print it, we get the image on the right
- This was a simple example, so let's step it up a bit in R
:::


## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A More Complicated Example *(In R)***</u>
:::

::: columns
::: {.column width="60%"}
```{r, echo = TRUE, eval = FALSE, `code-line-numbers`="1-14,17-18,23-24"}
# Library Load-ins---------------------------------
library(ggplot2); library(dplyr); library(artpack)

# Let's make: a "cityscape" with a sky, moon, and buildings

# Data for the sky---------------------
df_sky <- 
  tibble(x = 0,
         xend = 4,
         y = seq(0,3, length = 100),
         yend = y,
         color = art_pals("sunnyside", 100),
         linewidth = 10
  )

# Plot Creation-----------------------
df_sky |>
  ggplot(aes(x, y, xend = xend, yend = yend)) +
  theme_void() +
  coord_cartesian(expand = FALSE, 
                  xlim = c(0,4),
                  ylim = c(0,3)) +
  geom_segment(color = df_sky$color,
               linewidth = df_sky$linewidth) 


#...
```
:::

::: {.column width="40%"}
<br><br>

<center>![](images/sky_ggplot.png){width="100%"}</center>
:::
:::

::: notes
-   Again, we're not focusing on the code, per se,
-   but we just want to observe the general relationship going on here between the data and the visual
- Again, we start with your packages
-   and an idea of what to make - cityscape, sky, moon, and buildings
-   First I decide to make the sky in the background, so I make data for that first.
-   I make a data frame with numbers that when mapped on the ggplot will look like horizontal lines filling the page
-   i also add variables for the color and size of the lines
-   and when this data frame is plotted with the geom_segment fx we've added here, we get this beautiful gradient.
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A More Complicated Example *(In R)***</u>
:::

::: columns
::: {.column width="60%"}
```{r, echo = TRUE, eval = FALSE, `code-line-numbers`="1-8,10,18-24"}
# Data for the moon----------------------------------------------
df_moon <- tibble(
  x = 2,
  y = 1.5,
  size = 100,
  fill = "#f0e4bb",
  color = "#000000"
)

# Plot Creation--------------------------------------------------
df_sky |>
  ggplot(aes(x,y, xend = xend, yend = yend)) +
  theme_void() +
  coord_cartesian(xlim = c(0,4), ylim = c(0,3),
                  expand = FALSE) +
  geom_segment(color = df_sky$color, 
               linewidth = df_sky$linewidth) +
  geom_point(data = df_moon, aes(x,y),
             color = df_moon$color,
             fill = df_moon$fill,
             size = df_moon$size,
             shape = 21,
             stroke = .5,
             inherit.aes = FALSE)


#...
```
:::

::: {.column width="40%"}
<br><br>

<center>![](images/moon_ggplot.png){width="100%"}</center>
:::
:::

::: notes
-   Next, let's say we want to have a simple, big moon.
-   so again, we make another data frame that only has data for one single point..
-   a big numeric value for it's size and some color options
-   We then add this dataframe into the plot with the geom_point fx
-   and throw some tweaks into the geom_point to get that nice border we see here
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A More Complicated Example *(In R)***</u>
:::

::: columns
::: {.column width="60%"}
```{r, echo = TRUE, eval = FALSE, `code-line-numbers`="1-9,25-28"}
# Data for the buildings--------------------------------
df_buildings <- tibble(
  x = 0:4,
  xend = x, 
  y = 0,
  yend = sample(seq(.5,2, l = 10), 5, replace = TRUE),
  color = "#000000",linewidth = 60
)

# Plot Creation------------------------------------------
df_sky |>
  ggplot(aes(x,y, xend = xend, yend = yend)) +
  theme_void() +
  coord_cartesian(xlim = c(0,4), ylim = c(0,3),
                  expand = FALSE) +
  geom_segment(color = df_sky$color, 
               linewidth = df_sky$linewidth) +
  geom_point(data = df_moon, aes(x,y),
             color = df_moon$color,
             fill = df_moon$fill,
             size = df_moon$size,
             shape = 21,
             stroke = .5,
             inherit.aes = FALSE) +
  geom_segment(data = df_buildings,
               color = df_buildings$color,
               linewidth = df_buildings$linewidth)

```
:::

::: {.column width="40%"}
<br><br>

<center>![](images/buildings_ggplot.png){width="100%"}</center>
:::
:::

::: notes
-   Finally, we make one last data frame for some basic buildings
-   This time the numbers will plot chunky vertical lines
-   we can also get a lil' spicy and throw in a sample function to randomize the heights of our buildings.
-   and Like all the other layers, we tack it on to the ggplot with geom_segment shown at the bottom here
- and that's the gist, I know that was really quick, but the main thing I was you to take from this is that...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<br> <br>

<center>

::: {#bluequote}

> The concept of translating data into visuals is the same no matter how simple or complex a piece is...

:::

<br> <br>

::: fragment
::: {#bluequote}

> The **hard** part is usually the programming or the math🤢

:::
:::

</center>

::: notes
-   I also hope you all took note of how "intentional" alot of the process can be
-   While there's some artists out there that rely heavily on automated systems, or finetuning AI prompts
-   There are some of us out here spending hours exploring and creating art with code in this manner.

So now that everyone is up to speed about what generative art is, and you have some idea of how it can be made, let's quickly touch on some of the benefits of making art like this
:::

##  {background-color="#1a1a1a" background-image="images/background4.png" background-size="cover"}

<br> <br> <br> <br> <br> <br>

<center>

<h1>Benefits of Creating<br>Generative Art</h1>

</center>

::: notes
-   Theres lots of benefits to making art like this.
-   The Most important for me is how fun and therapeutic it can be.
-   Another big one though is just "learning" in general. And it got me to thinking about something...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: columns
::: {.column width="50%"}
<center>![](images/idea.gif){.false width="100%"}</center>
:::

::: {.column width="50%"}
<br><br>

<center>

::: {#turqquote}
> People may learn better when they are doing something they enjoy 🤯
:::

</center>

<br><br>

<center>

::: fragment
::: {#turqquote}

> If you enjoy creating art...you might learn some things 🤔

:::
:::

</center>
:::
:::

::: notes
-   I have an idea that.. first next click

after - I'm not trying to be funny, I can't just stand up here and say this is a proven fact. I'm not an expert in determining how people learn efficiently...but the best I can do is give you personal examples of my experience with creating generative art...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
<h3> The Obvious 🎨 </h3>

-   Improved Data Visualization Skills

<center>![](images/first_tt){width="80%"}</center>
:::

::: notes
- An example I love to use.. my tidy Tuesday submissions..<br>
- weekly data viz challenge we have?<br>
- Used to be super popular on Twitter before it became a hellsite..<br>
- This was my first submission...and you couldn't tell me NOTHING.<br>
- So proud I figured out a lollipop chart
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
<h3> The Obvious 🎨 </h3>

-   Improved Data Visualization Skills

<center>![](images/mid_tt){width="45%"}</center>
:::

::: notes
This was my work after about 2 months of creating generative art...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
<h3> The Obvious 🎨 </h3>

-   Improved Data Visualization Skills

<center>![](images/last_tt){width="75%"}</center>
:::

::: notes
And my most recent tidy tuesday I did this year... obviously, i developed knowledge of how to make things more aesthetically pleasing, and how to hack my tool of choice for some coll results.
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
<h3> The Abstract 🧠 </h3>

-   Mathematical/Logical Reasoning

<center>![](images/logic_ex1.png)</center>
:::

::: notes
Now for some more abstract examples...<br>
-Now remember yall, I HATE math 
- so Imagine how PISSED I was when I found out math was involved to make art..
- You can just not deny that
- Certain types of Art can require you to be knowledgeable about patterns, numeric sequences, and general logic.. logical reasoning is what makes it possible to go from a grid of points like this...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
<h3> The Abstract 🧠 </h3>

-   Mathematical/Logical Reasoning

<center>![](images/logic_ex2.png)</center>
:::

::: notes
To a grid with skipped patterns like this...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
<h3> The Abstract 🧠 </h3>

-   Mathematical/Logical Reasoning

<center>![](images/logic_ex3.png)</center>
:::

::: notes
To a finished piece of art like this, without having to manually create the data for every single pixel shown here.
:::


## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
<h3> The Unexpected 😲 </h3>

-   The Community

<center>![](images/tweet_ex.png){width="50%"}</center>
:::

::: notes
-   Making generative art gave me another reason to interact with people and share what I was doing...
-   funny enough, this tweet i made last year
-   Talking with others about how I wanted to create a package
-   because i've been doing more generative art, and felt there was need
-   But I honestly was always afraid to start
-   Because I did not feel smart enough
-   because I didn't having a formal developer background
- Which is now hilarious to me because, another unexpected benefit was..
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
<h3>The Unexpected 😲</h3>

-   Package Development - [{artpack}](https://meghansaha.github.io/artpack/)
:::

::: columns
::: {.column width="50%"}
<center>![](images/artpack.png){.false width="100%"}</center>
:::

::: {.column width="50%"}
<br><br><br>

-   My first ever package!
-   *Data-centric* Rtistry Toolkit
-   Early development, but things are coming
-   Now available on [CRAN](https://cloud.r-project.org/web/packages/artpack/index.html) 🎉
:::
:::

::: notes
- Package Development!
-   Not so much the package, but the courage to learn package development
-   Had a mental block with doing package development until i changed the motivation behind doing it into something that I loved like art.
:::


##  {background-color="#1a1a1a" background-image="images/background5.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br>

<center>

<h1>What is Data Science?</h1>

::: notes
Now that I've gushed about how much I love and benefited from generative art,

let's switch gears and quickly remind ourselves of what data science is...
:::

</center>

## What is Data Science? {.green background-color="#657750"}

<br>

In this room today, Data Science is defined as...

::: {#greenquote}
> A field that uses statistics, computing, methods, and processes *to extract or derive knowledge and insights from data*.
:::

<br><br><br>

::: fragment
<center>

<h3>*We'll focus on the technical methods and processes (coding) for the remainder of this talk...*</h3>

</center>
:::

##  {background-color="#1a1a1a" background-image="images/background6.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br> <br> <br>

<center>

<h1>Examples of How Generative Art Translates into Data Science</h1>

</center>

::: notes
-   Now that we're all on the same page about what data science is
-   let's get into examples
-   Now, I have tons of examples of this
-   But for our time today, I want to focus on three main concepts..
-   So how this will work is I'll present the concept first
-   then give an example for the concept in both
-   a gen art scenario I had on maternity leave 
-   and data science scenario I had back at work
:::

## Examples of How Generative Art Translates into Data Science {.yellow background-color="#C8B17E"}

::: {style="padding-bottom: 20px; padding-top: 20px;"}
<h3>Iteration♻️</h3>
:::

<br>

::: columns
::: {.column width="50%"}
-   Mastering this in Art and Data Science can be a **HUGE feat**

<br>

::: fragment
-   Important concept in both art and Data Science.
:::

<br>

::: fragment
-   A lot of scenarios in both fields, where we'd want to do the same thing over and over.
:::
:::

::: {.column width="50%"}
<center>![](images/iterations.gif)</center>
:::
:::

::: notes
-   We can't deny that iteration really tends to take people into the next level of skill, because it allows you to do so much with less.
:::

## Examples of How Generative Art Translates into Data Science - Iteration♻️ {.yellow background-color="#C8B17E"}

<br>

::: columns
::: {.column width="50%"}
<center><u>**Art Scenario**</u></center>

<br>

**Task:**

-   Want to create a lot of copies of a shape<br>
-   Each shape has a different color, size, and position on the coordinate system

<center>![](images/maximalism.png){height="40%"}</center>
:::

::: {.column width="50%"}
::: fragment
<center><u>**Data Sci Scenario**</u></center>

<br>

**Task:**

-   Want to summarize, label, and save multiple processed data sets all at once

<br>

<center>![](images/ex1_flow.png)</center>
:::
:::
:::

::: notes
"So while on maternity leave, I had a task in a art scenario that required..."<br>
"Back at work, I had a task in a Data Science Scenario"<br>
-   They look a little different, but these are both problems of iteration
:::

## Examples of How Generative Art Translates into Data Science - Iteration♻️ {.yellow background-color="#C8B17E"}

**Approach:**

-   Isolate the problem....

<br>

::: columns
::: {.column width="50%"}
<center><u>**Art Scenario**</u></center>

<center>![](images/ex1_isolate_art.png)</center>
:::

::: {.column width="50%"}
<center><u>**Data Sci Scenario**</u></center>

<center>![](images/ex1_isolate_ds.png)</center>
:::
:::

::: notes
In the art scenario: <br> 
- Isolation looked like figuring out the data<br> 
In the DS scenario: <br>
- Hopefully your data is clean and good so isolation looks like just getting your processes to run on at least one data frame, at least once without issues.
:::

## Examples of How Generative Art Translates into Data Science - Iteration♻️ {.yellow background-color="#C8B17E"}

**Solution:**

-   Use your preferred method of iteration to create a generalized workflow.

<br>

::: columns
::: {.column width="50%"}
<center><u>**Art Scenario**</u></center>

<br>

```{r, echo = TRUE, eval = FALSE}
# Finger options for iterations#
drip_opts <- list(
  1:n,
  y_starts,
  x_starts,
  fills_colors
)

# Finger data from the top-down#
drip <- pmap(drip_opts, ~tibble(
  x = c(..3, *math for x-axis goes here*),
  y = c(..2, *math for y-axis goes here*),
  group = group_numbers(..1),
  fill = c(..4)
)) |>
  list_rbind()
```
:::

::: {.column width="50%"}
<center><u>**Data Sci Scenario**</u></center>

<br>

```{r, echo = TRUE, eval = FALSE}
# Apply labels to all DFs
lst_labelled <- 
  imap(lst_vendors_dfs, 
       ~set_derived_variable_labels(
         .x,.y, path = here("some_path.csv"))
       )

# Skim all the DFs
map(lst_labelled, ~ skimr::skim(.x))

# Saving master analytic data set
map(lst_labelled,
    ~saveRDS(.x,
             file = glue(
               "{names(lst_labelled[.x])}.RDS"
               )))
```
:::
:::

::: notes
Solution is the same In art and ds alike:<br>
- Once you've isolated the problem, the challenge is to just successfully introduce iteration<br>

-   I will point out that my examples here are using purrr functions in R.
-   But whether you're using Purrr in R, or for loops in Python, 
-   all that matters is that you are doing what you need to, in a way that is intended and works for you
<br>

Ok, so if we're doing iterations, naturally, what comes next is development<click>
:::

## Examples of How Generative Art Translates into Data Science {.yellow background-color="#C8B17E"}

::: {style="padding-bottom: 20px; padding-top: 20px;"}
<h3>Development 📦</h3>
:::

<br>

::: columns
::: {.column width="50%"}
-   Learning and honing in on development skills is another **HUGE** feat <br><br>

::: fragment
-   In Generative Art, this promotes cleaner and robust workflows and more complex operations <br><br>
:::

::: fragment
-   In Data Science, it does the same, but you're ***really*** moving up to new levels✨.
:::
:::

::: {.column width="50%"}
<center>![](images/new_level.gif)</center>
:::
:::

::: notes
Development is HIGHLY desirable in: <br>
-   art because it can upgrade the complexity of your work
-   DS because it allows you to take more advantage of the "open-source" paradigm within our community by creating programs for yourself, internally for your organization, and others.
:::

## Examples of How Generative Art Translates into Data Science - Development 📦 {.yellow background-color="#C8B17E"}

<br>

::: columns
::: {.column width="50%"}
<center><u>**Art Scenario**</u></center>

<br>

**Task:**

-   Create a function that spits out a color palette based on input choices.

<center>![](images/ex2_art.png){width="100%"}</center>
:::

::: {.column width="50%"}
::: fragment
<center><u>**Data Sci Scenario**</u></center>

<br>

**Task:**

-   Want to create a function that left joins a table of existing data to another data frame.

<br>

<center>![](images/ex2_ds.png){width="100%"}</center>
:::
:::
:::

::: notes
"So while on maternity leave, I had a task in a art scenario that required..."<br>
"Back at work, I had a task in a Data Science Scenario"

So these are two different things, but the process for tackling both is very similar<br>
art scenario:<br>
-   Realized I was copying and pasting a block of code alot, so I wanted to reduce my code bloat in the artpack package<br>

ds scenario:<br>
-   We already had an existing fx created in an internal package that had stopped working as intended, So I needed to burn it down and create a new and improved function
:::

## Examples of How Generative Art Translates into Data Science - Development 📦 {.yellow background-color="#C8B17E"}

**Approach:**

-   Isolate: How do we handle the input?, how is it moving through the function? What is coming out?

::: columns
::: {.column width="50%"}
<center><u>**Art Scenario**</u></center>

<br>

```{r, eval = FALSE, echo = TRUE}
art_pals <- function(colors = "pal_1", n = 5) {
  
  # Preset Pals
  pal = switch(
    colors,
    "pal_1" = c("#000000", "#ffffff", "#1a1a1a"),
    "pal_2" = c("#1a2242", "#ea2242", "#9ad742")
  )
  
  # Creating pal with specified n
  final_pal = colorRampPalette(pal)(n)
  
  # Return final pal
  return(final_pal)
}
```
:::

::: {.column width="50%"}
<center><u>**Data Sci Scenario**</u></center>

<br>

```{r, eval = FALSE, echo = TRUE}
map_ae <- function(data = df_main,
                   join_col = ae_term) {
  
  # Preset data frame gets pulled in
  df_ae <- load(*df_ae path here*)
  
  # Creating new df with left_join
  final_df <- df_main |>
    left_join(df_ae, by = "ae_term")
  
  # Return final df
  return(final_df)
}
```
:::
:::

::: notes
-   Whether it's for art or data science, the approach is the same
-   You have to go through a process of iterative process of debugging and development
-   to try to create a function that is ideally efficient and runs as intended. 

:::

## Examples of How Generative Art Translates into Data Science - Development 📦 {.yellow background-color="#C8B17E"}

**Solution:**

-   Use your (hopefully) working function and reduce code bloat

<br>

::: columns
::: {.column width="50%"}
<center><u>**Art Scenario**</u></center>

<br>

```{r, eval = FALSE, echo = TRUE}
art_pals("pal_2",50)

*Returns 50 calculated colors based on `pal_2`*
```
:::

::: {.column width="50%"}
<center><u>**Data Sci Scenario**</u></center>

<br>

```{r, eval = FALSE, echo = TRUE}
map_ae(df_main, ae_term)

*Returns a joined data frame*
*with data from `df_main` and `df_ae`*
```
:::
:::

::: notes
"So the solution is simple, just use..."<br>
-   Whether you are in R or python, the goal of creating functions are the same <br>
-   We just wish to do a specific task..
-   in an isolated environment..
-   for a consistent output or result.
-   regardless of if it's for art or data science
-   Also, Creating functions is really the gateway into a slippery slope of other crucial development things like unit testing and package maintenance.
:::

## Examples of How Generative Art Translates into Data Science {.yellow background-color="#C8B17E"}

::: {style="padding-bottom: 20px; padding-top: 20px;"}
<h3>Communication 💬</h3>
:::

<br>

::: columns
::: {.column width="50%"}
-   It's **debatable** if you *need* communication for art<br><br>

::: fragment
-   Explaining art methods, and collaborating on issues requires communication <br><br>
:::

::: fragment
-   In Data Science, you **NEED to communicate *or else*** 💀
:::
:::

::: {.column width="50%"}
<center>![](images/confused.png){width="80%"}</center>
:::
:::

::: notes
"Ok, so my last concept I have here in communication"<br>
-   Even tho it's not required for art, I did get to practice this skill out a bit on maternity leave
:::

## Examples of How Generative Art Translates into Data Science - Communication 💬 {.yellow background-color="#C8B17E"}

::: columns
::: {.column width="50%"}
<center><u>**Art Scenario**</u></center>

<br>

**Task:**

-   Need help developing unit test suites for art functions...

<center>![](images/comms_ex_art.gif)</center>
:::

::: {.column width="50%"}
::: fragment
<center><u>**Data Sci Scenario**</u></center>

<br>

**Task:**

-   Need to perform a data request for a stakeholder...

    <center>![](images/comms_ex_ds.gif)</center>
:::
:::
:::

::: notes
"So while on maternity leave, I had a task in a art scenario that required..."<br>
"Back at work, I had a task in a Data Science Scenario"

Comparing these scenarios are interesting b/c

art scenario:<br>
I am the SME that needs programming help

data sci scenario: <br>
I am the Programmer that helps the SME by giving them data

both of These scenarios:<br> - Required communicating in different ways, but they had that same need of getting everyone on the same page.
:::

## Examples of How Generative Art Translates into Data Science - Communication 💬 {.yellow background-color="#C8B17E"}

**Approach:**

-   Identify what matters...

<br>

::: columns
::: {.column width="50%"}
<center><u>**Art Scenario**</u></center>

<br>

*"What I am functionally trying to do **without** the context of the art?"*
:::

::: {.column width="50%"}
<center><u>**Data Sci Scenario**</u></center>

<br>

*"What **external** context or details about the data am I missing?"*
:::
:::

::: box
<br>

<center>![](images/comms_approach.gif){width="25%"}</center>
:::

::: notes
So the approach to this in both scenarios:
Identifying what matters<br>

"So this meant asking myself..."
:::

## Examples of How Generative Art Translates into Data Science - Communication 💬 {.yellow background-color="#C8B17E"}

<br>

**Solution:**

-   Take the right course of action to get the desired result...

<br>

::: columns
::: {.column width="50%"}
<center><u>**Art Scenario**</u></center>

<br> Create a reprex with the [`reprex` package](https://reprex.tidyverse.org/) (R) or the [`reprexpy` library](https://reprexpy.readthedocs.io/en/latest/) (Python)...

<br>

```{r echo = TRUE, eval = FALSE}
# Some function that I can't get to work as expected----
reprex::reprex(
  {
  # UPPERCASES don't work
  is.color("BLUE")
  # lowercases do
  is.color("blue")
  }
)
```
:::

::: {.column width="50%"}
<center><u>**Data Sci Scenario**</u></center>

<br>

<center>![](images/no_tech.png){width="45%"}</center>
:::
:::

::: notes
Looks a little different, but is really similar:<br>
art scenario:<br>
-   Solution was: take the art "context" out of my question and identify what i wanted to do programmatically 
-   Perfect opportunity for me to practice making reprexes<br><br>
-   I did so With the reprex package available in R
-   but for python users you can use the reprex-PIE package in python<br><br>
DS scenario:<br>
-   If you're tasked with completing a request and
-   You're getting too bogged down in the programming
- It's a good idea to stop and ask yourself if you are missing external contextual info
- If you feel bogged down deep into the programming and you think it may be because you're missing info
-   The best thing to do is to pull yourself out of your IDE, and just Talk with the SME
:::

##  {background-color="#1a1a1a" background-image="images/background7.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br> <br> <br>

<center>

<h1>Final Thoughts</h1>

</center>

## Final Thoughts {.orange background-color="#C88A5B"}

<br><br>

<center>

::: {#orangequote}
> This was a tiny introduction into the concept of one type of generative art
:::

<br>

::: fragment
::: {#orangequote}
> This was personal: Generative Art was MY motivation to learn and do more
:::
:::

<br>

::: fragment
::: {#orangequote}
> Doing something I loved made programming/data science digestible
:::
:::

</center>

::: notes
-   For those of you interested in generative art, I hope this talk gives you the push to open up your favorite IDE and try it out.
-   For those of you that are not interested, I encourage you all to consider integrating a hobby or interest into your learning journeys
-   Managers and leads at work, could you make room in your team's scheduling to allow for personal development that looks like this?
-   Are you willing to let go of the belief that learning only looks like courses and textbooks?
:::

##  {background-image="images/background.png" background-size="cover"}

::: notes
-   Regardless of what you do after this talk, I want you to think about how different learning approaches may work for you.
-   If you're currently having trouble understanding something
-   Try to embrace learning in a low-stress environment fueled only by your interests.
-   It may be hard, but try to let go of the notion that data science or programming can only be for profit or practical insights.
-   Remember that we can conquer these beautiful but abstract challenges by transforming them -\>
:::

##  {background-color="#1a1a1a"}

<center>![](images/heart_end.png){.false}</center>

::: notes
-   into passions that we love.
-   And if you're struggling with that fact, that's OK. 
-   Just give it some time and remember that it's all about perspective.
:::
