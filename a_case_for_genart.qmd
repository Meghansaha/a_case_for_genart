---
title: "It's All About Perspective"
subtitle: "Making A Case for Generative Art"
author: "Meghan Harris, MPH"
institute: "Posit::conf(2023)"
date: "09-20-2023"
date-format: "MMMM Do, YYYY | YYYY-MM-DD"
format:
  revealjs: 
    slide-number: true
    width: 1690
    height: 1080
    linkcolor: "#ffffff"
    highlight-style: github
    code-copy: true
    code-overflow: scroll
    code-block-bg: true
    transition: fade
css: "scripts/style.css"
editor: visual
title-slide-attributes: 
  data-background-image: "images/background.png"
  data-background-size: "stretch"
  data-background-position: "center"
  data-background-color: "#1a1a1a"
  data-notes: "Good morning, everyone! Im Meghan Harris, I'm a data scientist at the Prostate Cancer Clinical Trials Consortium, and I'm also a generative artist that's here to introduce you all to generative art and a glimpse at a different approach to learning data science. But before I dive in to that, I have to say that I feel like I'm only talking here today because I decided to stop working about 10 months ago. Now, Let me explain. I didn't go off the deep end and quit my job or anything, but as you can see here..."
transition: fade
---

##  {background-color="#1a1a1a" background-image="images/intro_back.png" background-size="cover"}

<center>

![A snapchat picture of me showing my baby bump at 37 weeks](images/whale_bump.jpg){width="700"}

</center>

::: notes
10 months ago I was very pregnant and ready to pop. I gave birth to a beautiful baby and went on maternity leave for 6 months and I know it sounds fake, but...
:::

##  {background-color="#1a1a1a" background-image="images/intro_back.png" background-size="cover"}

<center>

![A shot of me coding in R Studio while watching a baby monitor](images/unreal.jpg){width="1000"}

</center>

::: notes
... I actually found time to code on leave. But I had a rule to only code if it was for fun stuff like art...
:::

##  {background-color="#1a1a1a" background-image="images/intro_back.png" background-size="cover"}

<center>

![Some artwork I made on maternity leave](images/roundup.png){.false width="1300"}

</center>

::: notes
... By the end of my leave, I was actually amazed at how much coding to make art like this helped with practical data science skills. I credit this for smoothing out my transition back into work.And Today, I want to give you all a glimpse of how that was possible.
:::

##  {background-color="#1a1a1a" background-image="images/background1.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br> <br> <br>

<center>

<h1>Disclaimer</h1>

</center>

::: notes
With that being said, I also want to give a disclaimer that it's OK if you don't know how to make generative art, or even if you don't like art. It's also OK if you don't know much about data science. My hope is that you treat this talk like a choose-your-own-adventure. just like those old goosebumps books. Hopefully, I'm not the only old person in here who remembers those, with those cool-looking covers? They kinda looked like this?
:::

##  {background-color="#7a2929"}

::: columns
::: {.column width="50%"}
![](images/ga1.png)
:::

::: {.column width="50%"}
![](images/ga2.png)
:::
:::

::: notes
So whether you're here for the art
:::

##  {background-color="#7a2929"}

::: columns
::: {.column width="50%"}
![](images/ds1.png)
:::

::: {.column width="50%"}
![](images/ds2.png)
:::
:::

::: notes
or the data science...
:::

##  {background-color="#7a2929"}

<center>

![](images/learn1.png){width="50%"}

<center>

::: notes
or just learning, I'm hoping there will be something for you to take away from this today. So let's get started....
:::

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map1.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

</div>

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map2.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

-   <h3>How Can we Make Generative Art in R or Python?</h3>

</div>

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map3.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

-   <h3>How Can we Make Generative Art in R or Python?</h3>

-   <h3>Benefits of Creating Generative Art</h3>

</div>

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map4.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

-   <h3>How Can we Make Generative Art in R or Python?</h3>

-   <h3>Benefits of Creating Generative Art</h3>

-   <h3>What is Data Science?</h3>

</div>

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map5.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

-   <h3>How Can we Make Generative Art in R or Python?</h3>

-   <h3>Benefits of Creating Generative Art</h3>

-   <h3>What is Data Science?</h3>

-   <h3>Examples of How Generative Art Translates into Data Science</h3>

</div>

## What are we Talking About Today? {.black background-color="#1a1a1a" background-image="images/map6.png" background-size="cover"}

<div>

-   <h3>What is Generative Art?</h3>

-   <h3>How Can we Make Generative Art in R or Python?</h3>

-   <h3>Benefits of Creating Generative Art</h3>

-   <h3>What is Data Science?</h3>

-   <h3>Examples of How Generative Art Translates into Data Science</h3>

-   <h3>Final Thoughts</h3>

</div>

##  {background-color="#1a1a1a" background-image="images/background2.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br> <br> <br>

<center>

<h1>What is Generative Art?</h1>

</center>

::: notes
So I want to pose a question to you all, you don't have to answer me, but just think for a second, what do ***you*** think generative art is?

-   Is it opening up a digital sketchpad and physically drawing on a screen?
-   Is it making automated code that spits out random images
-   Is outputs from AI art platforms like Dall-E or Lensa?

I tried to find an official definition of generative art for you all, But it wasn't in Webster or anything, so of course I had to use Wikipedia...
:::

## What is Generative Art? {.purple background-color="#6c4161"}

<br>

According to Wikipedia:

> *Generative art refers to art that in whole or in part has been created with the use of an autonomous system.*

<br> <br>

. . .

Further:

> *An autonomous system in this context is generally one that is non-human and can independently determine features of an artwork that would otherwise require decisions made directly by the artist.*

::: notes
So, I'll tell you right now....my response to this was "nah, this ain't it"..

actually...
:::

## What is Generative Art? {.purple background-color="#6c4161"}

<br>

<center>

<div>

![](images/wrong.png){.false fig-align="left" width="45%"} ![](images/judging-you.gif){fig-align="center" width="40%"}

</div>

</center>

::: notes
this was my reaction reading that definition..

Because..I don't agree with the inclusion of the words "autonomous system." I feel that it implies that no work goes into the creation of generative art as a whole. Generative art is not simply just prompting a computer with something.

It is true that some art is created with automated algorithms... But to generally say this is ALL generative art is wrong in my opinion... so...
:::

## What is Generative Art? {.purple background-color="#6c4161"}

<br> <br>

In this room today, Generative Art is defined as:

<br> <br>

> **Artwork created through a program in any language or interface. As long as a program executes the generation of the art, it can be considered generative art.**

::: notes
Now, some of you might be thinking..that's vague and general, and yes. that's on purpose

<br>

Because I can guarantee you, that there are multiple definitions of generative art floating around in your minds, collectively in this room right now.

And I'm also making an assumption that at least one person in here is thinking of AI art. So I want to address this now... I don't know much about AI art, and I've actually only made AI art once..
:::

## What is Generative Art - Distinctions {.purple background-color="#6c4161" auto-animate="true"}

::: {style="position: relative; float: center; margin-top: 100px;"}
<center>![](images/ai_art_ex.png){fig-alt="A vast, cosmic, and beautiful galaxy with swirling blue, purple, and pink colors in the background. In the foreground a vibrantly colored planet directly in front of the sun." width="800"}</center>
:::

::: notes
Which produced this lovely piece here.

But I'm really not qualified to talk about AI art, but there are two things that I want to clarify in regards to AI art and automation in general...
:::

## What is Generative Art? - Distinctions {.purple background-color="#6c4161" auto-animate="true"}

::: columns
::: {.column style="position: relative; float: left; margin-top: 100px; width='50%';  margin-right:0px;"}
<center>![](images/ai_art_ex.png){fig-alt="A vast, cosmic, and beautiful galaxy with swirling blue, purple, and pink colors in the background. In the foreground a vibrantly colored planet directly in front of the sun." width="800"}</center>
:::
:::

::: {.column width="50%"}
<br><br>

-   While all AI Art is generative art...

-   All generative art **IS NOT** AI art

<br>

<center>&</center>

<br>

-   While some generative art is randomly calculated by the computer...

-   Some generative art is intentional and deliberately calculated by a human
:::

::: notes
Now..what do I mean by that...we'll see some examples now...
:::



##  {background-color="#1a1a1a" background-image="images/background3.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br> <br> <br>

<center>

<h1>How Can we Make Generative Art<br>in R or Python?</h1>

</center>

::: notes
It's probably safe to say we have data people in here, and probably safe to say most of you have either created data visualizations with R or Python. I will say this, if you know how to make visuals in R or Python, you're already half way there...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<br> <br> <br>

<center>

::: {#bluequote}
> Making generative art might not be as hard as you think...
>
> You just need ✨data✨ and to
>
> [Think outside the grid](https://thetidytrekker.com/post/thinking-outside-the-grid/thinking-outside-the-grid.html) 📊 of your favorite graphical software/package
:::

</center>

::: notes
If you really want to dive into making this change in thinking in R with ggplot2, this slide has a link to a blog post I made showing this in detail in a beginner friendly way.

I'm going to be real with ya'll, I don't have enough time to truly explain in depth how to make complicated generative art with R or python, but I'll make an attempt at a crash course right now...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<br><br>

<center>

<h3>Some "Primitive" Graphical Tools🛠</h3>

</center>

<br> <br>

::: columns
::: {.column width="50%"}
<center>**R Packages** ![](images/r_logo.png)</center>

<center>

-   [`ggplot2`](https://ggplot2.tidyverse.org/)
-   Base R w/ `plot()` or [`grid`](https://www.stat.auckland.ac.nz/~paul/grid/grid.html)
-   [`r2D3`](https://rstudio.github.io/r2d3/)
-   [`lattice`](http://lattice.r-forge.r-project.org/)

</center>
:::

::: {.column width="50%"}
<center>**Python Libraries** ![](images/python_logo.png)</center>

<center>

-   [`plotnine`](https://plotnine.readthedocs.io/en/stable/)
-   [`pillow` (PIL)](https://pypi.org/project/Pillow/)
-   [`matplotlib`](https://matplotlib.org/)
-   [`turtle`](https://docs.python.org/3/library/turtle.html)

</center>
:::
:::

<br><br>

<center>*If it lets you plot data, it will let you make art...*</center>

::: notes
When first starting out, picking a package or library you are already familiar with may be helpful. But my personal bias is ggplot2 for R and plotnine for python because it's ggplot2.

I say this because of the framework it is built on. I personally think it's conducive to creating generative art.

But you don't need to use the tidyverse or ggplot to create art. The main point is that if a tool lets you plot data, it will let you make art. The challenge comes in when you need to understand how data translates into a visual.

So, when it comes down to it...if we usually use these tools for data visualization, one might naturally make the assumption that there's some secret piece of knowledge that generative artists know to do some sorcery with data in order to get art. and that assumption is somewhat correct. But the comment I hear the most whenever doing meetups, or talks like this is...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<br><br>

<center>

::: {#bluequote}

> "I don't understand how you get the data to put into \[ *insert your graphical tool of choice here* \]"

:::

<br><br><br>

![](images/confused.gif){width="50%"}

</center>

::: notes
Imagine that we want to draw a line on a piece paper, that's straightforward...
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<br> <br>

<center>![](images/line_ex.gif){.false}</center>

::: notes
If someone is physically able to pick up a pen, and draw a straight line on a piece of paper, that's something most people could probably think they could do. Some people might think they can't draw at all so wouldn't be able to make a straight line, so maybe they try to do this on graph paper instead..
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<center>![](images/graph_ex.gif){.false width="60%"}</center>

::: notes
Now, this may be way easier to people. There's a guide now. A grid that can help you keep your line straight.

But if you stop for a minute and think...where have a seen a grid before?

For you, it may be in any of your favorite visualization tools, for me, it's ggplot2
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

<center>![](images/graph_ex2.gif){.false width="60%"}</center>

::: notes
So now using a grid as guidance, we can set values to every mark we make on the paper. Set up on a coordinate system.

If you take the time to understand the relationship between the visuals you want to make, and the data you need to make them, this process becomes easier to make more complicated things.
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A Simple Example *(In Python)***</u>
:::

::: columns
::: {.column width="55%"}
```{python, echo = TRUE, eval = FALSE, `code-line-numbers`="1-5"}
#===============================================================#
# Library Load-in------------------------------------------------
#===============================================================#
from plotnine import *
import pandas as pd

#===============================================================#
# Image Options--------------------------------------------------
#===============================================================#
#Set the color
orange_hex = "#FFBB58"

#Set the width
chonk = 10

#===============================================================#
# Data Creation--------------------------------------------------
#===============================================================#
line = pd.DataFrame({"x" : list(range(0,5)),
                     "y" : 1,
                     "color" : orange_hex,
                     "size" : chonk})

#===============================================================#
# Plot Creation--------------------------------------------------
#===============================================================#
orange_line = (ggplot(line, aes("x", "y"))+
               geom_path(color = line.loc[:,"color"],
                         size = line.loc[:,"size"])+
               coord_equal(ylim = (0,3), xlim = (0,4)))

#View the plot
print(orange_line)

```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/python_ex1.png){width="100%"}</center>
:::
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A Simple Example *(In Python)***</u>
:::

::: columns
::: {.column width="55%"}
```{python, echo = TRUE, eval = FALSE, `code-line-numbers`="1-5,7-14"}
#===============================================================#
# Library Load-in------------------------------------------------
#===============================================================#
from plotnine import *
import pandas as pd

#===============================================================#
# Image Options--------------------------------------------------
#===============================================================#
#Set the color
orange_hex = "#FFBB58"

#Set the width
chonk = 10

#===============================================================#
# Data Creation--------------------------------------------------
#===============================================================#
line = pd.DataFrame({"x" : list(range(0,5)),
                     "y" : 1,
                     "color" : orange_hex,
                     "size" : chonk})

#===============================================================#
# Plot Creation--------------------------------------------------
#===============================================================#
orange_line = (ggplot(line, aes("x", "y"))+
               geom_path(color = line.loc[:,"color"],
                         size = line.loc[:,"size"])+
               coord_equal(ylim = (0,3), xlim = (0,4)))

#View the plot
print(orange_line)

```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/python_ex1.png){width="100%"}</center>
:::
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A Simple Example *(In Python)***</u>
:::

::: columns
::: {.column width="55%"}
```{python, echo = TRUE, eval = FALSE, `code-line-numbers`="1-5,7-14,16-22"}
#===============================================================#
# Library Load-in------------------------------------------------
#===============================================================#
from plotnine import *
import pandas as pd

#===============================================================#
# Image Options--------------------------------------------------
#===============================================================#
#Set the color
orange_hex = "#FFBB58"

#Set the width
chonk = 10

#===============================================================#
# Data Creation--------------------------------------------------
#===============================================================#
line = pd.DataFrame({"x" : list(range(0,5)),
                     "y" : 1,
                     "color" : orange_hex,
                     "size" : chonk})

#===============================================================#
# Plot Creation--------------------------------------------------
#===============================================================#
orange_line = (ggplot(line, aes("x", "y"))+
               geom_path(color = line.loc[:,"color"],
                         size = line.loc[:,"size"])+
               coord_equal(ylim = (0,3), xlim = (0,4)))

#View the plot
print(orange_line)

```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/python_ex1.png){width="100%"}</center>
:::
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A Simple Example *(In Python)***</u>
:::

::: columns
::: {.column width="55%"}
```{python, echo = TRUE, eval = FALSE, `code-line-numbers`="1-5,7-14,16-22,24-33"}
#===============================================================#
# Library Load-in------------------------------------------------
#===============================================================#
from plotnine import *
import pandas as pd

#===============================================================#
# Image Options--------------------------------------------------
#===============================================================#
#Set the color
orange_hex = "#FFBB58"

#Set the width
chonk = 10

#===============================================================#
# Data Creation--------------------------------------------------
#===============================================================#
line = pd.DataFrame({"x" : list(range(0,5)),
                     "y" : 1,
                     "color" : orange_hex,
                     "size" : chonk})

#===============================================================#
# Plot Creation--------------------------------------------------
#===============================================================#
orange_line = (ggplot(line, aes("x", "y"))+
               geom_path(color = line.loc[:,"color"],
                         size = line.loc[:,"size"])+
               coord_equal(ylim = (0,3), xlim = (0,4)))

#View the plot
print(orange_line)

```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/python_ex1.png){width="100%"}</center>
:::
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A More Complicated Example *(In R)***</u>
:::

::: columns
::: {.column width="55%"}
```{r, echo = TRUE, eval = FALSE}
# Library Load-ins-----------------------------------------------
library(ggplot2); library(dplyr); library(artpack)

# Let's make a basic "cityscape" with a moon 






















# Plot Creation--------------------------------------------------
#Data Goes Here |>
  ggplot(aes(x,y)) +
  theme_void() +
  coord_cartesian(expand = FALSE, xlim = c(0,4), ylim = c(0,3))
 #....
```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/blank_ggplot.png){width="100%"}</center>
:::
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A More Complicated Example *(In R)***</u>
:::

::: columns
::: {.column width="55%"}
```{r, echo = TRUE, eval = FALSE, `code-line-numbers`="4-11,16-22"}
# Library Load-ins-----------------------------------------------
library(ggplot2); library(dplyr); library(artpack)

# Data for the sky-----------------------------------------------
df_sky <- tibble(x = 0,
                 xend = 4,
                 y = seq(0,3, length = 100),
                 yend = y,
                 color = art_pals("sunnyside", n = 100),
                 linewidth = 10
                 )




# Plot Creation--------------------------------------------------
df_sky |>
  ggplot(aes(x,y, xend = xend, yend = yend,)) +
  theme_void() +
  coord_cartesian(expand = FALSE, xlim = c(0,4), ylim = c(0,3)) +
  geom_segment(color = df_sky$color,
               linewidth = df_sky$linewidth) 









#...
```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/sky_ggplot.png){width="100%"}</center>
:::
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A More Complicated Example *(In R)***</u>
:::

::: columns
::: {.column width="55%"}
```{r, echo = TRUE, eval = FALSE, `code-line-numbers`="4-15,18-28"}
# Library Load-ins-----------------------------------------------
library(ggplot2); library(dplyr); library(artpack)

# Data for the stars---------------------------------------------
df_stars <- tibble(
  x = seq(0,4, l = 50),
  y = seq(0,3, l = 50)
) |>
  expand.grid() |>
  mutate(
    color = "white",
    size = sample(seq(.01,.2, l = 25), 2500, replace = TRUE),
    alpha = sample(seq(.1,.7, l = 25), 2500, replace = TRUE)
  ) |>
  slice_sample(prop = .2)


# Plot Creation--------------------------------------------------
df_sky |>
  ggplot(aes(x,y, xend = xend, yend = yend,)) +
  theme_void() +
  coord_cartesian(expand = FALSE, xlim = c(0,4), ylim = c(0,3)) +
  geom_segment(color = df_sky$color,
               linewidth = df_sky$linewidth) +
  geom_point(data = df_stars, aes(x,y),
             alpha = df_stars$alpha,
             color = df_stars$color,
             size = df_stars$size,
             position = position_jitter(width = .1, height = .1),
             inherit.aes = FALSE) 



#...
```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/stars_ggplot.png){width="100%"}</center>
:::
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A More Complicated Example *(In R)***</u>
:::

::: columns
::: {.column width="55%"}
```{r, echo = TRUE, eval = FALSE, `code-line-numbers`="1-8,10-29"}
# Data for the moon----------------------------------------------
df_moon <- tibble(
  x = 2,
  y = 1.5,
  size = 100,
  fill = "#f0e4bb",
  color = "#000000"
)

# Plot Creation--------------------------------------------------
df_sky |>
  ggplot(aes(x,y, xend = xend, yend = yend,)) +
  theme_void() +
  coord_cartesian(expand = FALSE, xlim = c(0,4), ylim = c(0,3)) +
  geom_segment(color = df_sky$color,
               linewidth = df_sky$linewidth) +
  geom_point(data = df_stars, aes(x,y),
             alpha = df_stars$alpha,
             color = df_stars$color,
             size = df_stars$size,
             position = position_jitter(width = .1, height = .1),
             inherit.aes = FALSE) +
  geom_point(data = df_moon, aes(x,y),
             color = df_moon$color,
             fill = df_moon$fill,
             size = df_moon$size,
             shape = 21,
             stroke = .5,
             inherit.aes = FALSE) 


#...
```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/moon_ggplot.png){width="100%"}</center>
:::
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}

::: {style="padding-bottom: 20px;"}
<u>**A More Complicated Example *(In R)***</u>
:::

::: columns
::: {.column width="55%"}
```{r, echo = TRUE, eval = FALSE}
# Data for the buildings-----------------------------------------
df_buildings <- tibble(
  x = 0:4,
  xend = x, 
  y = 0,
  yend = sample(seq(.5,2, l = 10), 5, replace = TRUE),
  color = "#000000",linewidth = 60
)


# Plot Creation--------------------------------------------------
df_sky |>
  ggplot(aes(x,y, xend = xend, yend = yend)) +
  theme_void() +
  coord_cartesian(expand = FALSE, xlim = c(0,4), ylim = c(0,3)) +
  geom_segment(color = df_sky$color,
               linewidth = df_sky$linewidth) +
  geom_point(data = df_stars, aes(x,y),
             alpha = df_stars$alpha,
             color = df_stars$color,
             size = df_stars$size,
             position = position_jitter(width = .1, height = .1),
             inherit.aes = FALSE) +
  geom_point(data = df_moon, aes(x,y),
             color = df_moon$color,
             fill = df_moon$fill,
             size = df_moon$size,
             shape = 21,
             stroke = .5,
             inherit.aes = FALSE) +
  geom_segment(data = df_buildings, color = df_buildings$color,
               linewidth = df_buildings$linewidth)

```
:::

::: {.column width="45%"}
<br><br>

<center>![](images/buildings_ggplot.png){width="100%"}</center>
:::
:::

## How Can we Make Generative Art in R or Python? {.mutedblue background-color="#4e5483"}


<br> <br> 

<center>

::: {#bluequote}
> The concept of translating data into visuals is the same no matter how simple or complex a piece is...
:::

<br> <br>

:::{.fragment}
::: {#bluequote}
> The **hard** part is usually the programming or the math🤢
:::
:::
</center>


##  {background-color="#1a1a1a" background-image="images/background4.png" background-size="cover"}

<br> <br> <br> <br> <br> <br>

<center>

<h1>Benefits of Creating<br>Generative Art</h1>

</center>

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: columns
::: {.column width="50%"}
<center>![](images/idea.gif){.false width="100%"}</center>
:::


::: {.column width="50%"}

<br><br>

<center>

:::{#turqquote}
> People may learn better when they are doing something they enjoy 🤯
:::

</center>

<br><br>

<center>

:::{.fragment}
:::{#turqquote}
> If you enjoy creating art...you might learn some things 🤔
:::
:::

</center>

:::
:::

:::notes
I'm not trying to be funny, I can't just stand up here and say this is a proven fact. I'm not an expert in determining how people learn efficiently...the best I can do is give you personal examples...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
### The Obvious 🎨

- Improved Data Visualization Skills

<center>


![](images/first_tt){width="80%"}


</center>
:::

::: notes
An example I love to use for this are my tidy Tuesday submissions.. you know, that weekly data viz challenge we have? Used to be super popular on Twitter before it became a hellsite.. This was my first submission...and you couldn't tell me NOTHING. I felt so proud of this. And honestly, I had every reason to be. Making this was a great accomplishment at the time because I taught myself how to do it.
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
### The Obvious 🎨

- Improved Data Visualization Skills

<center>


![](images/mid_tt){width="45%"}


</center>
:::

::: notes
 This was my work after about 2 months of creating generative art...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
### The Obvious 🎨

- Improved Data Visualization Skills

<center>


![](images/last_tt){width="75%"}


</center>
:::



::: notes
And my most recent tidy tuesday I did this year...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
### The Abstract 🧠

- Mathematical/Logical Reasoning

<center>


![](images/logic_ex1.png)

</center>
:::


::: notes
Imagine how PISSED I was when I found out math was involved to make art..

Art can require you to be knowledgeable about patterns, numeric sequences, and general logic..

logical reasoning is what makes it possible to go from a grid of points like this...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
### The Abstract 🧠

- Mathematical/Logical Reasoning

<center>


![](images/logic_ex2.png)

</center>
:::


::: notes
To a grid with skipped patterns like this...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
### The Abstract 🧠

- Mathematical/Logical Reasoning

<center>


![](images/logic_ex3.png)

</center>
:::


::: notes
To a finished piece of art like this, without having to manually create the data for every single pixel shown here.
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
### The Abstract 🧠

- Functional Programming

```{r, echo = TRUE, eval = FALSE}
# Custom FX from the Functions in Rtistry Workshop -
# Found Here: https://thetidytrekker.com/talks/functions_in_rtistry/functions_for_rtistry

circle_randomizer(
  color_pal = "random",
  border_color = "random",
  crowding = "random",
  coordinates = "random"
  )
```

::: columns
::: {.column width="33%"}
![](images/fx_ex2.png)
:::

::: {.column width="33%"}

<br><br>

![](images/fx_ex1.png)
:::

::: {.column width="33%"}
![](images/fx_ex3.png)
:::


:::
:::


::: notes
Wanting to create more complicated art is natural the longer you do it. You start to realize how helpful it is to learn more about programming in general. Art is why I created my first function ever in R.
:::


## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}
### The Unexpected 😲

- The [#genartclub](https://twitter.com/search?q=%23genartclub&src=typed_query) and [#rtistry](https://fosstodon.org/search) community

<center>

![](images/tweet_ex.png){width="50%"}


</center>
:::


::: notes
Gave me another reason to interact with people and share what I was doing...
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}

<h3>The Unexpected 😲</h3>

- Package Development - [{artpack}](https://meghansaha.github.io/artpack/)

:::


::: columns

::: {.column width="50%"}

<center>

![](images/artpack.png){.false width="100%"}

</center>

:::

::: {.column width="50%"}

<br><br><br>

- My first ever package!
- *Data-centric* Rtistry Toolkit
- Early development, but things are coming
- Now available on [CRAN](https://cloud.r-project.org/web/packages/artpack/index.html) 🎉

:::

:::



::: notes
Yes, I made a package - Huge accomplishment for me!
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}

<h3>The Unexpected 😲</h3>

- Art Store - ["Tidy Treks"](https://www.etsy.com/shop/TidyTreks)

:::


::: columns

::: {.column width="50%"}

<center>

![](images/tidytreks.png){width="100%"}

</center>

:::

::: {.column width="50%"}

<center>
![](images/artex.png){.false width="70%"}

A few fancy canvases, posters, and novelties - all created with R

</center>

:::

:::



::: notes
Yes, I made a store!
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}

<h3>The Unexpected 😲</h3>

- Rtistry Textbook?! - “Rtistry: Methods For Visual Generative Art Using R”

:::


::: columns

::: {.column width="50%"}

<center>

![](images/book_snip.png){width="100%"}

</center>

:::

::: {.column width="50%"}

<br><br><br>

- Yes!!
- Co-authored with [Antonio Páez](https://fosstodon.org/@paezha@mastodon.online), [Antonio Chinchón](https://twitter.com/aschinchon), and [Jacquie Tran](https://fosstodon.org/@jacquietran@mastodon.social)
- First open-sourced textbook dedicated to teaching readers how to create generative art in R

:::

:::



::: notes
Yes, I made a package - Huge accomplishment for me!
:::

## Benefits of Creating Generative Art {.turq background-color="#3a7188"}

::: {style="padding-bottom: 20px;"}

<h3>The Most Important ❤️</h3>

- It's therapeutic, fun, and (mostly) low-stress


<center>
![](images/heart.png){width="50%"}
</center>

:::


::: notes
I owe alot to generative art, the tidyverse, and the R community.
:::




##  {background-color="#1a1a1a" background-image="images/background5.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br>

<center>

<h1>What is Data Science?</h1>

</center>

## What is Data Science? {.green background-color="#657750"}

##  {background-color="#1a1a1a" background-image="images/background6.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br> <br> <br>

<center>

<h1>Examples of How Generative Art Translates into Data Science</h1>

</center>

## Examples of How Generative Art Translates into Data Science {.yellow background-color="#ba9c5e"}

##  {background-color="#1a1a1a" background-image="images/background7.png" background-size="cover"}

<br> <br> <br> <br> <br> <br> <br> <br> <br>

<center>

<h1>Final Thoughts</h1>

</center>

## Final Thoughts {.orange background-color="#bb743e"}
